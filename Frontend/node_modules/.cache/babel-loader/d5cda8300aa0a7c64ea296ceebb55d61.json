{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport RcSwitch from 'rc-switch';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Wave from '../_util/wave';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\n\nvar Switch = /*#__PURE__*/function (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  function Switch(props) {\n    var _this;\n\n    _classCallCheck(this, Switch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Switch).call(this, props));\n\n    _this.saveSwitch = function (node) {\n      _this.rcSwitch = node;\n    };\n\n    _this.renderSwitch = function (_ref) {\n      var _classNames;\n\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          size = _this$props.size,\n          loading = _this$props.loading,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          disabled = _this$props.disabled;\n      var prefixCls = getPrefixCls('switch', customizePrefixCls);\n      var classes = classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-small\"), size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-loading\"), loading), _classNames));\n      var loadingIcon = loading ? React.createElement(Icon, {\n        type: \"loading\",\n        className: \"\".concat(prefixCls, \"-loading-icon\")\n      }) : null;\n      return React.createElement(Wave, {\n        insertExtraNode: true\n      }, React.createElement(RcSwitch, _extends({}, omit(_this.props, ['loading']), {\n        prefixCls: prefixCls,\n        className: classes,\n        disabled: disabled || loading,\n        ref: _this.saveSwitch,\n        loadingIcon: loadingIcon\n      })));\n    };\n\n    warning('checked' in props || !('value' in props), 'Switch', '`value` is not validate prop, do you mean `checked`?');\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: \"focus\",\n    value: function focus() {\n      this.rcSwitch.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.rcSwitch.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderSwitch);\n    }\n  }]);\n\n  return Switch;\n}(React.Component);\n\nexport { Switch as default };\nSwitch.__ANT_SWITCH = true;\nSwitch.propTypes = {\n  prefixCls: PropTypes.string,\n  // HACK: https://github.com/ant-design/ant-design/issues/5368\n  // size=default and size=large are the same\n  size: PropTypes.oneOf(['small', 'default', 'large']),\n  className: PropTypes.string\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,OAAP,MAAoB,kBAApB;;IACqBC,M;;;AACjB,kBAAYC,KAAZ,EAAmB;AAAA;;AAAAC;;AACfC,gFAAMF,KAAN;;AACAE,UAAKC,UAAL,GAAkB,UAACC,IAAD,EAAU;AACxBF,YAAKG,QAAL,GAAgBD,IAAhB;AADJ;;AAGAF,UAAKI,YAAL,GAAoB,gBAAsB;AAAA;;AAAA,UAAnBC,YAAmB,QAAnBA,YAAmB;AAAA,wBAC6CL,MAAKF,KADlD;AAAA,UACnBQ,kBADmB,eAC9BC,SAD8B;AAAA,UACCC,IADD,eACCA,IADD;AAAA,UACOC,OADP,eACOA,OADP;AAAA,8CACgBC,SADhB;AAAA,UACgBA,SADhB,sCAC4B,EAD5B;AAAA,UACgCC,QADhC,eACgCA,QADhC;AAEtC,UAAMJ,SAAS,GAAGF,YAAY,CAAC,QAAD,EAAWC,kBAAX,CAA9B;AACA,UAAMM,OAAO,GAAGrB,UAAU,CAACmB,SAAD,4DAClBH,SADkB,aACEC,IAAI,KAAK,OADX,0CAElBD,SAFkB,eAEIE,OAFJ,gBAA1B;AAIA,UAAMI,WAAW,GAAGJ,OAAO,GAAIrB,oBAACM,IAAD;AAAMoB,YAAI,EAAC,SAAX;AAAqBJ,iBAAS,YAAKH,SAAL;AAA9B,QAAJ,GAAsE,IAAjG;AACA,aAAQnB,oBAACK,IAAD;AAAMsB,uBAAe;AAArB,SACZ3B,oBAACE,QAAD,eAAcE,IAAI,CAACQ,MAAKF,KAAN,EAAa,CAAC,SAAD,CAAb,CAAlB;AAA6CS,iBAAS,EAAEA,SAAxD;AAAmEG,iBAAS,EAAEE,OAA9E;AAAuFD,gBAAQ,EAAEA,QAAQ,IAAIF,OAA7G;AAAsHO,WAAG,EAAEhB,MAAKC,UAAhI;AAA4IY,mBAAW,EAAEA;AAAzJ,SADY,CAAR;AARJ;;AAYAjB,WAAO,CAAC,aAAaE,KAAb,IAAsB,EAAE,WAAWA,KAAb,CAAvB,EAA4C,QAA5C,EAAsD,sDAAtD,CAAPF;AAjBe;AAkBlB;;;;4BACO;AACJ,WAAKO,QAAL,CAAcc,KAAd;AACH;;;2BACM;AACH,WAAKd,QAAL,CAAce,IAAd;AACH;;;6BACQ;AACL,aAAO9B,oBAACO,cAAD,QAAiB,KAAKS,YAAtB,CAAP;AACH;;;;EA5B+BhB,KAAK,CAAC+B;;SAArBtB,M;AA8BrBA,MAAM,CAACuB,YAAPvB,GAAsB,IAAtBA;AACAA,MAAM,CAACwB,SAAPxB,GAAmB;AACfU,WAAS,EAAElB,SAAS,CAACiC,MADN;AAEf;AACA;AACAd,MAAI,EAAEnB,SAAS,CAACkC,KAAVlC,CAAgB,CAAC,OAAD,EAAU,SAAV,EAAqB,OAArB,CAAhBA,CAJS;AAKfqB,WAAS,EAAErB,SAAS,CAACiC;AALN,CAAnBzB","names":["React","PropTypes","RcSwitch","classNames","omit","Wave","Icon","ConfigConsumer","warning","Switch","props","_classCallCheck","_this","saveSwitch","node","rcSwitch","renderSwitch","getPrefixCls","customizePrefixCls","prefixCls","size","loading","className","disabled","classes","loadingIcon","type","insertExtraNode","ref","focus","blur","Component","__ANT_SWITCH","propTypes","string","oneOf"],"sources":["switch/index.jsx"],"sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport RcSwitch from 'rc-switch';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Wave from '../_util/wave';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nexport default class Switch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.saveSwitch = (node) => {\n            this.rcSwitch = node;\n        };\n        this.renderSwitch = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, size, loading, className = '', disabled } = this.props;\n            const prefixCls = getPrefixCls('switch', customizePrefixCls);\n            const classes = classNames(className, {\n                [`${prefixCls}-small`]: size === 'small',\n                [`${prefixCls}-loading`]: loading,\n            });\n            const loadingIcon = loading ? (<Icon type=\"loading\" className={`${prefixCls}-loading-icon`}/>) : null;\n            return (<Wave insertExtraNode>\n        <RcSwitch {...omit(this.props, ['loading'])} prefixCls={prefixCls} className={classes} disabled={disabled || loading} ref={this.saveSwitch} loadingIcon={loadingIcon}/>\n      </Wave>);\n        };\n        warning('checked' in props || !('value' in props), 'Switch', '`value` is not validate prop, do you mean `checked`?');\n    }\n    focus() {\n        this.rcSwitch.focus();\n    }\n    blur() {\n        this.rcSwitch.blur();\n    }\n    render() {\n        return <ConfigConsumer>{this.renderSwitch}</ConfigConsumer>;\n    }\n}\nSwitch.__ANT_SWITCH = true;\nSwitch.propTypes = {\n    prefixCls: PropTypes.string,\n    // HACK: https://github.com/ant-design/ant-design/issues/5368\n    // size=default and size=large are the same\n    size: PropTypes.oneOf(['small', 'default', 'large']),\n    className: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}