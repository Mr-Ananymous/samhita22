{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport RcMenu, { Divider, ItemGroup } from 'rc-menu';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { polyfill } from 'react-lifecycles-compat';\nimport SubMenu from './SubMenu';\nimport Item from './MenuItem';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport { SiderContext } from '../layout/Sider';\nimport raf from '../_util/raf';\nimport collapseMotion from '../_util/motion';\nimport MenuContext from './MenuContext';\n\nvar InternalMenu = /*#__PURE__*/function (_React$Component) {\n  _inherits(InternalMenu, _React$Component);\n\n  function InternalMenu(props) {\n    var _this;\n\n    _classCallCheck(this, InternalMenu);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InternalMenu).call(this, props)); // Restore vertical mode when menu is collapsed responsively when mounted\n    // https://github.com/ant-design/ant-design/issues/13104\n    // TODO: not a perfect solution, looking a new way to avoid setting switchingModeFromInline in this situation\n\n    _this.handleMouseEnter = function (e) {\n      _this.restoreModeVerticalFromInline();\n\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter(e);\n      }\n    };\n\n    _this.handleTransitionEnd = function (e) {\n      // when inlineCollapsed menu width animation finished\n      // https://github.com/ant-design/ant-design/issues/12864\n      var widthCollapsed = e.propertyName === 'width' && e.target === e.currentTarget; // Fix SVGElement e.target.className.indexOf is not a function\n      // https://github.com/ant-design/ant-design/issues/15699\n\n      var className = e.target.className; // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during an animation.\n\n      var classNameValue = Object.prototype.toString.call(className) === '[object SVGAnimatedString]' ? className.animVal : className; // Fix for <Menu style={{ width: '100%' }} />, the width transition won't trigger when menu is collapsed\n      // https://github.com/ant-design/ant-design-pro/issues/2783\n\n      var iconScaled = e.propertyName === 'font-size' && classNameValue.indexOf('anticon') >= 0;\n\n      if (widthCollapsed || iconScaled) {\n        _this.restoreModeVerticalFromInline();\n      }\n    };\n\n    _this.handleClick = function (e) {\n      _this.handleOpenChange([]);\n\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e);\n      }\n    };\n\n    _this.handleOpenChange = function (openKeys) {\n      _this.setOpenKeys(openKeys);\n\n      var onOpenChange = _this.props.onOpenChange;\n\n      if (onOpenChange) {\n        onOpenChange(openKeys);\n      }\n    };\n\n    _this.renderMenu = function (_ref) {\n      var getPopupContainer = _ref.getPopupContainer,\n          getPrefixCls = _ref.getPrefixCls;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          className = _this$props.className,\n          theme = _this$props.theme,\n          collapsedWidth = _this$props.collapsedWidth;\n      var passProps = omit(_this.props, ['collapsedWidth', 'siderCollapsed']);\n\n      var menuMode = _this.getRealMenuMode();\n\n      var menuOpenMotion = _this.getOpenMotionProps(menuMode);\n\n      var prefixCls = getPrefixCls('menu', customizePrefixCls);\n      var menuClassName = classNames(className, \"\".concat(prefixCls, \"-\").concat(theme), _defineProperty({}, \"\".concat(prefixCls, \"-inline-collapsed\"), _this.getInlineCollapsed()));\n\n      var menuProps = _extends({\n        openKeys: _this.state.openKeys,\n        onOpenChange: _this.handleOpenChange,\n        className: menuClassName,\n        mode: menuMode\n      }, menuOpenMotion);\n\n      if (menuMode !== 'inline') {\n        // closing vertical popup submenu after click it\n        menuProps.onClick = _this.handleClick;\n      } // https://github.com/ant-design/ant-design/issues/8587\n\n\n      var hideMenu = _this.getInlineCollapsed() && (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px');\n\n      if (hideMenu) {\n        menuProps.openKeys = [];\n      }\n\n      return React.createElement(RcMenu, _extends({\n        getPopupContainer: getPopupContainer\n      }, passProps, menuProps, {\n        prefixCls: prefixCls,\n        onTransitionEnd: _this.handleTransitionEnd,\n        onMouseEnter: _this.handleMouseEnter\n      }));\n    };\n\n    warning(!('onOpen' in props || 'onClose' in props), 'Menu', '`onOpen` and `onClose` are removed, please use `onOpenChange` instead, ' + 'see: https://u.ant.design/menu-on-open-change.');\n    warning(!('inlineCollapsed' in props && props.mode !== 'inline'), 'Menu', '`inlineCollapsed` should only be used when `mode` is inline.');\n    warning(!(props.siderCollapsed !== undefined && 'inlineCollapsed' in props), 'Menu', '`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.');\n    var openKeys;\n\n    if ('openKeys' in props) {\n      openKeys = props.openKeys;\n    } else if ('defaultOpenKeys' in props) {\n      openKeys = props.defaultOpenKeys;\n    }\n\n    _this.state = {\n      openKeys: openKeys || [],\n      switchingModeFromInline: false,\n      inlineOpenKeys: [],\n      prevProps: props\n    };\n    return _this;\n  }\n\n  _createClass(InternalMenu, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      raf.cancel(this.mountRafId);\n    }\n  }, {\n    key: \"setOpenKeys\",\n    value: function setOpenKeys(openKeys) {\n      if (!('openKeys' in this.props)) {\n        this.setState({\n          openKeys: openKeys\n        });\n      }\n    }\n  }, {\n    key: \"getRealMenuMode\",\n    value: function getRealMenuMode() {\n      var inlineCollapsed = this.getInlineCollapsed();\n\n      if (this.state.switchingModeFromInline && inlineCollapsed) {\n        return 'inline';\n      }\n\n      var mode = this.props.mode;\n      return inlineCollapsed ? 'vertical' : mode;\n    }\n  }, {\n    key: \"getInlineCollapsed\",\n    value: function getInlineCollapsed() {\n      var inlineCollapsed = this.props.inlineCollapsed;\n\n      if (this.props.siderCollapsed !== undefined) {\n        return this.props.siderCollapsed;\n      }\n\n      return inlineCollapsed;\n    }\n  }, {\n    key: \"getOpenMotionProps\",\n    value: function getOpenMotionProps(menuMode) {\n      var _this$props2 = this.props,\n          openTransitionName = _this$props2.openTransitionName,\n          openAnimation = _this$props2.openAnimation,\n          motion = _this$props2.motion; // Provides by user\n\n      if (motion) {\n        return {\n          motion: motion\n        };\n      }\n\n      if (openAnimation) {\n        warning(typeof openAnimation === 'string', 'Menu', '`openAnimation` do not support object. Please use `motion` instead.');\n        return {\n          openAnimation: openAnimation\n        };\n      }\n\n      if (openTransitionName) {\n        return {\n          openTransitionName: openTransitionName\n        };\n      } // Default logic\n\n\n      if (menuMode === 'horizontal') {\n        return {\n          motion: {\n            motionName: 'slide-up'\n          }\n        };\n      }\n\n      if (menuMode === 'inline') {\n        return {\n          motion: collapseMotion\n        };\n      } // When mode switch from inline\n      // submenu should hide without animation\n\n\n      return {\n        motion: {\n          motionName: this.state.switchingModeFromInline ? '' : 'zoom-big'\n        }\n      };\n    }\n  }, {\n    key: \"restoreModeVerticalFromInline\",\n    value: function restoreModeVerticalFromInline() {\n      var switchingModeFromInline = this.state.switchingModeFromInline;\n\n      if (switchingModeFromInline) {\n        this.setState({\n          switchingModeFromInline: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MenuContext.Provider, {\n        value: {\n          inlineCollapsed: this.getInlineCollapsed() || false,\n          antdMenuTheme: this.props.theme\n        }\n      }, React.createElement(ConfigConsumer, null, this.renderMenu));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: nextProps\n      };\n\n      if (prevProps.mode === 'inline' && nextProps.mode !== 'inline') {\n        newState.switchingModeFromInline = true;\n      }\n\n      if ('openKeys' in nextProps) {\n        newState.openKeys = nextProps.openKeys;\n      } else {\n        // [Legacy] Old code will return after `openKeys` changed.\n        // Not sure the reason, we should keep this logic still.\n        if (nextProps.inlineCollapsed && !prevProps.inlineCollapsed || nextProps.siderCollapsed && !prevProps.siderCollapsed) {\n          newState.switchingModeFromInline = true;\n          newState.inlineOpenKeys = prevState.openKeys;\n          newState.openKeys = [];\n        }\n\n        if (!nextProps.inlineCollapsed && prevProps.inlineCollapsed || !nextProps.siderCollapsed && prevProps.siderCollapsed) {\n          newState.openKeys = prevState.inlineOpenKeys;\n          newState.inlineOpenKeys = [];\n        }\n      }\n\n      return newState;\n    }\n  }]);\n\n  return InternalMenu;\n}(React.Component);\n\nInternalMenu.defaultProps = {\n  className: '',\n  theme: 'light',\n  focusable: false\n};\npolyfill(InternalMenu); // We should keep this as ref-able\n\nvar Menu = /*#__PURE__*/function (_React$Component2) {\n  _inherits(Menu, _React$Component2);\n\n  function Menu() {\n    _classCallCheck(this, Menu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Menu).apply(this, arguments));\n  }\n\n  _createClass(Menu, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(SiderContext.Consumer, null, function (context) {\n        return React.createElement(InternalMenu, _extends({}, _this2.props, context));\n      });\n    }\n  }]);\n\n  return Menu;\n}(React.Component);\n\nexport { Menu as default };\nMenu.Divider = Divider;\nMenu.Item = Item;\nMenu.SubMenu = SubMenu;\nMenu.ItemGroup = ItemGroup;","map":{"version":3,"mappings":"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","names":["React","RcMenu","Divider","ItemGroup","classNames","omit","polyfill","SubMenu","Item","ConfigConsumer","warning","SiderContext","raf","collapseMotion","MenuContext","InternalMenu","props","_classCallCheck","_this","handleMouseEnter","e","restoreModeVerticalFromInline","onMouseEnter","handleTransitionEnd","widthCollapsed","propertyName","target","currentTarget","className","classNameValue","Object","prototype","toString","call","animVal","iconScaled","indexOf","handleClick","handleOpenChange","onClick","openKeys","setOpenKeys","onOpenChange","renderMenu","getPopupContainer","getPrefixCls","customizePrefixCls","prefixCls","theme","collapsedWidth","passProps","menuMode","getRealMenuMode","menuOpenMotion","getOpenMotionProps","menuClassName","getInlineCollapsed","menuProps","_extends","state","mode","hideMenu","onTransitionEnd","siderCollapsed","undefined","defaultOpenKeys","switchingModeFromInline","inlineOpenKeys","prevProps","cancel","mountRafId","setState","inlineCollapsed","openTransitionName","openAnimation","motion","motionName","Provider","value","antdMenuTheme","nextProps","prevState","newState","Component","defaultProps","focusable","Menu","Consumer","context","_this2"],"sources":["menu/index.jsx"],"sourcesContent":["import * as React from 'react';\nimport RcMenu, { Divider, ItemGroup } from 'rc-menu';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { polyfill } from 'react-lifecycles-compat';\nimport SubMenu from './SubMenu';\nimport Item from './MenuItem';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport { SiderContext } from '../layout/Sider';\nimport raf from '../_util/raf';\nimport collapseMotion from '../_util/motion';\nimport MenuContext from './MenuContext';\nclass InternalMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        // Restore vertical mode when menu is collapsed responsively when mounted\n        // https://github.com/ant-design/ant-design/issues/13104\n        // TODO: not a perfect solution, looking a new way to avoid setting switchingModeFromInline in this situation\n        this.handleMouseEnter = (e) => {\n            this.restoreModeVerticalFromInline();\n            const { onMouseEnter } = this.props;\n            if (onMouseEnter) {\n                onMouseEnter(e);\n            }\n        };\n        this.handleTransitionEnd = (e) => {\n            // when inlineCollapsed menu width animation finished\n            // https://github.com/ant-design/ant-design/issues/12864\n            const widthCollapsed = e.propertyName === 'width' && e.target === e.currentTarget;\n            // Fix SVGElement e.target.className.indexOf is not a function\n            // https://github.com/ant-design/ant-design/issues/15699\n            const { className } = e.target;\n            // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during an animation.\n            const classNameValue = Object.prototype.toString.call(className) === '[object SVGAnimatedString]'\n                ? className.animVal\n                : className;\n            // Fix for <Menu style={{ width: '100%' }} />, the width transition won't trigger when menu is collapsed\n            // https://github.com/ant-design/ant-design-pro/issues/2783\n            const iconScaled = e.propertyName === 'font-size' && classNameValue.indexOf('anticon') >= 0;\n            if (widthCollapsed || iconScaled) {\n                this.restoreModeVerticalFromInline();\n            }\n        };\n        this.handleClick = (e) => {\n            this.handleOpenChange([]);\n            const { onClick } = this.props;\n            if (onClick) {\n                onClick(e);\n            }\n        };\n        this.handleOpenChange = (openKeys) => {\n            this.setOpenKeys(openKeys);\n            const { onOpenChange } = this.props;\n            if (onOpenChange) {\n                onOpenChange(openKeys);\n            }\n        };\n        this.renderMenu = ({ getPopupContainer, getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, className, theme, collapsedWidth } = this.props;\n            const passProps = omit(this.props, ['collapsedWidth', 'siderCollapsed']);\n            const menuMode = this.getRealMenuMode();\n            const menuOpenMotion = this.getOpenMotionProps(menuMode);\n            const prefixCls = getPrefixCls('menu', customizePrefixCls);\n            const menuClassName = classNames(className, `${prefixCls}-${theme}`, {\n                [`${prefixCls}-inline-collapsed`]: this.getInlineCollapsed(),\n            });\n            const menuProps = Object.assign({ openKeys: this.state.openKeys, onOpenChange: this.handleOpenChange, className: menuClassName, mode: menuMode }, menuOpenMotion);\n            if (menuMode !== 'inline') {\n                // closing vertical popup submenu after click it\n                menuProps.onClick = this.handleClick;\n            }\n            // https://github.com/ant-design/ant-design/issues/8587\n            const hideMenu = this.getInlineCollapsed() &&\n                (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px');\n            if (hideMenu) {\n                menuProps.openKeys = [];\n            }\n            return (<RcMenu getPopupContainer={getPopupContainer} {...passProps} {...menuProps} prefixCls={prefixCls} onTransitionEnd={this.handleTransitionEnd} onMouseEnter={this.handleMouseEnter}/>);\n        };\n        warning(!('onOpen' in props || 'onClose' in props), 'Menu', '`onOpen` and `onClose` are removed, please use `onOpenChange` instead, ' +\n            'see: https://u.ant.design/menu-on-open-change.');\n        warning(!('inlineCollapsed' in props && props.mode !== 'inline'), 'Menu', '`inlineCollapsed` should only be used when `mode` is inline.');\n        warning(!(props.siderCollapsed !== undefined && 'inlineCollapsed' in props), 'Menu', '`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.');\n        let openKeys;\n        if ('openKeys' in props) {\n            openKeys = props.openKeys;\n        }\n        else if ('defaultOpenKeys' in props) {\n            openKeys = props.defaultOpenKeys;\n        }\n        this.state = {\n            openKeys: openKeys || [],\n            switchingModeFromInline: false,\n            inlineOpenKeys: [],\n            prevProps: props,\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { prevProps } = prevState;\n        const newState = {\n            prevProps: nextProps,\n        };\n        if (prevProps.mode === 'inline' && nextProps.mode !== 'inline') {\n            newState.switchingModeFromInline = true;\n        }\n        if ('openKeys' in nextProps) {\n            newState.openKeys = nextProps.openKeys;\n        }\n        else {\n            // [Legacy] Old code will return after `openKeys` changed.\n            // Not sure the reason, we should keep this logic still.\n            if ((nextProps.inlineCollapsed && !prevProps.inlineCollapsed) ||\n                (nextProps.siderCollapsed && !prevProps.siderCollapsed)) {\n                newState.switchingModeFromInline = true;\n                newState.inlineOpenKeys = prevState.openKeys;\n                newState.openKeys = [];\n            }\n            if ((!nextProps.inlineCollapsed && prevProps.inlineCollapsed) ||\n                (!nextProps.siderCollapsed && prevProps.siderCollapsed)) {\n                newState.openKeys = prevState.inlineOpenKeys;\n                newState.inlineOpenKeys = [];\n            }\n        }\n        return newState;\n    }\n    componentWillUnmount() {\n        raf.cancel(this.mountRafId);\n    }\n    setOpenKeys(openKeys) {\n        if (!('openKeys' in this.props)) {\n            this.setState({ openKeys });\n        }\n    }\n    getRealMenuMode() {\n        const inlineCollapsed = this.getInlineCollapsed();\n        if (this.state.switchingModeFromInline && inlineCollapsed) {\n            return 'inline';\n        }\n        const { mode } = this.props;\n        return inlineCollapsed ? 'vertical' : mode;\n    }\n    getInlineCollapsed() {\n        const { inlineCollapsed } = this.props;\n        if (this.props.siderCollapsed !== undefined) {\n            return this.props.siderCollapsed;\n        }\n        return inlineCollapsed;\n    }\n    getOpenMotionProps(menuMode) {\n        const { openTransitionName, openAnimation, motion } = this.props;\n        // Provides by user\n        if (motion) {\n            return { motion };\n        }\n        if (openAnimation) {\n            warning(typeof openAnimation === 'string', 'Menu', '`openAnimation` do not support object. Please use `motion` instead.');\n            return { openAnimation };\n        }\n        if (openTransitionName) {\n            return { openTransitionName };\n        }\n        // Default logic\n        if (menuMode === 'horizontal') {\n            return { motion: { motionName: 'slide-up' } };\n        }\n        if (menuMode === 'inline') {\n            return { motion: collapseMotion };\n        }\n        // When mode switch from inline\n        // submenu should hide without animation\n        return {\n            motion: {\n                motionName: this.state.switchingModeFromInline ? '' : 'zoom-big',\n            },\n        };\n    }\n    restoreModeVerticalFromInline() {\n        const { switchingModeFromInline } = this.state;\n        if (switchingModeFromInline) {\n            this.setState({\n                switchingModeFromInline: false,\n            });\n        }\n    }\n    render() {\n        return (<MenuContext.Provider value={{\n            inlineCollapsed: this.getInlineCollapsed() || false,\n            antdMenuTheme: this.props.theme,\n        }}>\n        <ConfigConsumer>{this.renderMenu}</ConfigConsumer>\n      </MenuContext.Provider>);\n    }\n}\nInternalMenu.defaultProps = {\n    className: '',\n    theme: 'light',\n    focusable: false,\n};\npolyfill(InternalMenu);\n// We should keep this as ref-able\nexport default class Menu extends React.Component {\n    render() {\n        return (<SiderContext.Consumer>\n        {(context) => <InternalMenu {...this.props} {...context}/>}\n      </SiderContext.Consumer>);\n    }\n}\nMenu.Divider = Divider;\nMenu.Item = Item;\nMenu.SubMenu = SubMenu;\nMenu.ItemGroup = ItemGroup;\n"]},"metadata":{},"sourceType":"module"}