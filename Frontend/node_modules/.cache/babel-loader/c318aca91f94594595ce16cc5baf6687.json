{"ast":null,"code":"import * as React from 'react';\nimport padEnd from 'lodash/padEnd';\n\nvar StatisticNumber = function StatisticNumber(props) {\n  var value = props.value,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      _props$groupSeparator = props.groupSeparator,\n      groupSeparator = _props$groupSeparator === void 0 ? '' : _props$groupSeparator,\n      prefixCls = props.prefixCls;\n  var valueNode;\n\n  if (typeof formatter === 'function') {\n    // Customize formatter\n    valueNode = formatter(value);\n  } else {\n    // Internal formatter\n    var val = String(value);\n    var cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/); // Process if illegal number\n\n    if (!cells) {\n      valueNode = val;\n    } else {\n      var negative = cells[1];\n\n      var _int = cells[2] || '0';\n\n      var decimal = cells[4] || '';\n      _int = _int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n\n      if (typeof precision === 'number') {\n        decimal = padEnd(decimal, precision, '0').slice(0, precision);\n      }\n\n      if (decimal) {\n        decimal = \"\".concat(decimalSeparator).concat(decimal);\n      }\n\n      valueNode = [React.createElement(\"span\", {\n        key: \"int\",\n        className: \"\".concat(prefixCls, \"-content-value-int\")\n      }, negative, _int), decimal && React.createElement(\"span\", {\n        key: \"decimal\",\n        className: \"\".concat(prefixCls, \"-content-value-decimal\")\n      }, decimal)];\n    }\n  }\n\n  return React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-value\")\n  }, valueNode);\n};\n\nexport default StatisticNumber;","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,QAAS;AAAA,MACrBC,KADqB,GAC6DC,KAD7D,CACrBD,KADqB;AAAA,MACdE,SADc,GAC6DD,KAD7D,CACdC,SADc;AAAA,MACHC,SADG,GAC6DF,KAD7D,CACHE,SADG;AAAA,MACQC,gBADR,GAC6DH,KAD7D,CACQG,gBADR;AAAA,8BAC6DH,KAD7D,CAC0BI,cAD1B;AAAA,MAC0BA,cAD1B,sCAC2C,EAD3C;AAAA,MAC+CC,SAD/C,GAC6DL,KAD7D,CAC+CK,SAD/C;AAE7B,MAAIC,SAAJ;;AACA,MAAI,OAAOL,SAAP,KAAqB,UAAzB,EAAqC;AACjC;AACAK,aAAS,GAAGL,SAAS,CAACF,KAAD,CAArBO;AAFJ,SAIK;AACD;AACA,QAAMC,GAAG,GAAGC,MAAM,CAACT,KAAD,CAAlB;AACA,QAAMU,KAAK,GAAGF,GAAG,CAACG,KAAJH,CAAU,uBAAVA,CAAd,CAHC,CAID;;AACA,QAAI,CAACE,KAAL,EAAY;AACRH,eAAS,GAAGC,GAAZD;AADJ,WAGK;AACD,UAAMK,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAtB;;AACA,UAAIG,IAAG,GAAGH,KAAK,CAAC,CAAD,CAALA,IAAY,GAAtB;;AACA,UAAII,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAALA,IAAY,EAA1B;AACAG,UAAG,GAAGA,IAAG,CAACE,OAAJF,CAAY,uBAAZA,EAAqCR,cAArCQ,CAANA;;AACA,UAAI,OAAOV,SAAP,KAAqB,QAAzB,EAAmC;AAC/BW,eAAO,GAAGhB,MAAM,CAACgB,OAAD,EAAUX,SAAV,EAAqB,GAArB,CAANL,CAAgCkB,KAAhClB,CAAsC,CAAtCA,EAAyCK,SAAzCL,CAAVgB;AACH;;AACD,UAAIA,OAAJ,EAAa;AACTA,eAAO,aAAMV,gBAAN,SAAyBU,OAAzB,CAAPA;AACH;;AACDP,eAAS,GAAG,CACRV;AAAMoB,WAAG,EAAC,KAAV;AAAgBC,iBAAS,YAAKZ,SAAL;AAAzB,SACLM,QADK,EAELC,IAFK,CADQ,EAKRC,OAAO,IAAKjB;AAAMoB,WAAG,EAAC,SAAV;AAAoBC,iBAAS,YAAKZ,SAAL;AAA7B,SACfQ,OADe,CALJ,CAAZP;AASH;AACJ;;AACD,SAAOV;AAAMqB,aAAS,YAAKZ,SAAL;AAAf,KAAgDC,SAAhD,CAAP;AArCJ;;AAuCA,eAAeR,eAAf","names":["React","padEnd","StatisticNumber","value","props","formatter","precision","decimalSeparator","groupSeparator","prefixCls","valueNode","val","String","cells","match","negative","int","decimal","replace","slice","key","className"],"sources":["statistic/Number.jsx"],"sourcesContent":["import * as React from 'react';\nimport padEnd from 'lodash/padEnd';\nconst StatisticNumber = props => {\n    const { value, formatter, precision, decimalSeparator, groupSeparator = '', prefixCls } = props;\n    let valueNode;\n    if (typeof formatter === 'function') {\n        // Customize formatter\n        valueNode = formatter(value);\n    }\n    else {\n        // Internal formatter\n        const val = String(value);\n        const cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/);\n        // Process if illegal number\n        if (!cells) {\n            valueNode = val;\n        }\n        else {\n            const negative = cells[1];\n            let int = cells[2] || '0';\n            let decimal = cells[4] || '';\n            int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n            if (typeof precision === 'number') {\n                decimal = padEnd(decimal, precision, '0').slice(0, precision);\n            }\n            if (decimal) {\n                decimal = `${decimalSeparator}${decimal}`;\n            }\n            valueNode = [\n                <span key=\"int\" className={`${prefixCls}-content-value-int`}>\n          {negative}\n          {int}\n        </span>,\n                decimal && (<span key=\"decimal\" className={`${prefixCls}-content-value-decimal`}>\n            {decimal}\n          </span>),\n            ];\n        }\n    }\n    return <span className={`${prefixCls}-content-value`}>{valueNode}</span>;\n};\nexport default StatisticNumber;\n"]},"metadata":{},"sourceType":"module"}