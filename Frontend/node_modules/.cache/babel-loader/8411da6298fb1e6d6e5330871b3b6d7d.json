{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport RcTree, { TreeNode } from 'rc-tree';\nimport classNames from 'classnames';\nimport DirectoryTree from './DirectoryTree';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport collapseMotion from '../_util/motion';\n\nvar Tree = /*#__PURE__*/function (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  function Tree() {\n    var _this;\n\n    _classCallCheck(this, Tree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tree).apply(this, arguments));\n\n    _this.renderSwitcherIcon = function (prefixCls, switcherIcon, _ref) {\n      var isLeaf = _ref.isLeaf,\n          expanded = _ref.expanded,\n          loading = _ref.loading;\n      var showLine = _this.props.showLine;\n\n      if (loading) {\n        return React.createElement(Icon, {\n          type: \"loading\",\n          className: \"\".concat(prefixCls, \"-switcher-loading-icon\")\n        });\n      }\n\n      if (isLeaf) {\n        if (showLine) {\n          return React.createElement(Icon, {\n            type: \"file\",\n            className: \"\".concat(prefixCls, \"-switcher-line-icon\")\n          });\n        }\n\n        return null;\n      }\n\n      var switcherCls = \"\".concat(prefixCls, \"-switcher-icon\");\n\n      if (switcherIcon) {\n        var switcherOriginCls = switcherIcon.props.className || '';\n        return React.cloneElement(switcherIcon, {\n          className: classNames(switcherOriginCls, switcherCls)\n        });\n      }\n\n      if (showLine) {\n        return React.createElement(Icon, {\n          type: expanded ? 'minus-square' : 'plus-square',\n          className: \"\".concat(prefixCls, \"-switcher-line-icon\"),\n          theme: \"outlined\"\n        });\n      }\n\n      return React.createElement(Icon, {\n        type: \"caret-down\",\n        className: switcherCls,\n        theme: \"filled\"\n      });\n    };\n\n    _this.setTreeRef = function (node) {\n      _this.tree = node;\n    };\n\n    _this.renderTree = function (_ref2) {\n      var _classNames;\n\n      var getPrefixCls = _ref2.getPrefixCls;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          props = _assertThisInitialize.props;\n\n      var customizePrefixCls = props.prefixCls,\n          className = props.className,\n          showIcon = props.showIcon,\n          _switcherIcon = props.switcherIcon,\n          blockNode = props.blockNode,\n          children = props.children;\n      var checkable = props.checkable;\n      var prefixCls = getPrefixCls('tree', customizePrefixCls);\n      return React.createElement(RcTree, _extends({\n        ref: _this.setTreeRef\n      }, props, {\n        prefixCls: prefixCls,\n        className: classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-icon-hide\"), !showIcon), _defineProperty(_classNames, \"\".concat(prefixCls, \"-block-node\"), blockNode), _classNames)),\n        checkable: checkable ? React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-checkbox-inner\")\n        }) : checkable,\n        switcherIcon: function switcherIcon(nodeProps) {\n          return _this.renderSwitcherIcon(prefixCls, _switcherIcon, nodeProps);\n        }\n      }), children);\n    };\n\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderTree);\n    }\n  }]);\n\n  return Tree;\n}(React.Component);\n\nexport { Tree as default };\nTree.TreeNode = TreeNode;\nTree.DirectoryTree = DirectoryTree;\nTree.defaultProps = {\n  checkable: false,\n  showIcon: false,\n  motion: _extends(_extends({}, collapseMotion), {\n    motionAppear: false\n  }),\n  blockNode: false\n};","map":{"version":3,"mappings":"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","names":["React","RcTree","TreeNode","classNames","DirectoryTree","Icon","ConfigConsumer","collapseMotion","Tree","_classCallCheck","_this","arguments","renderSwitcherIcon","prefixCls","switcherIcon","isLeaf","expanded","loading","showLine","props","type","className","switcherCls","switcherOriginCls","cloneElement","theme","setTreeRef","node","tree","renderTree","getPrefixCls","customizePrefixCls","showIcon","blockNode","children","checkable","ref","nodeProps","Component","defaultProps","motion","_extends","motionAppear"],"sources":["tree/Tree.jsx"],"sourcesContent":["import * as React from 'react';\nimport RcTree, { TreeNode } from 'rc-tree';\nimport classNames from 'classnames';\nimport DirectoryTree from './DirectoryTree';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport collapseMotion from '../_util/motion';\nexport default class Tree extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderSwitcherIcon = (prefixCls, switcherIcon, { isLeaf, expanded, loading }) => {\n            const { showLine } = this.props;\n            if (loading) {\n                return <Icon type=\"loading\" className={`${prefixCls}-switcher-loading-icon`}/>;\n            }\n            if (isLeaf) {\n                if (showLine) {\n                    return <Icon type=\"file\" className={`${prefixCls}-switcher-line-icon`}/>;\n                }\n                return null;\n            }\n            const switcherCls = `${prefixCls}-switcher-icon`;\n            if (switcherIcon) {\n                const switcherOriginCls = switcherIcon.props.className || '';\n                return React.cloneElement(switcherIcon, {\n                    className: classNames(switcherOriginCls, switcherCls),\n                });\n            }\n            if (showLine) {\n                return (<Icon type={expanded ? 'minus-square' : 'plus-square'} className={`${prefixCls}-switcher-line-icon`} theme=\"outlined\"/>);\n            }\n            return <Icon type=\"caret-down\" className={switcherCls} theme=\"filled\"/>;\n        };\n        this.setTreeRef = (node) => {\n            this.tree = node;\n        };\n        this.renderTree = ({ getPrefixCls }) => {\n            const { props } = this;\n            const { prefixCls: customizePrefixCls, className, showIcon, switcherIcon, blockNode, children, } = props;\n            const { checkable } = props;\n            const prefixCls = getPrefixCls('tree', customizePrefixCls);\n            return (<RcTree ref={this.setTreeRef} {...props} prefixCls={prefixCls} className={classNames(className, {\n                [`${prefixCls}-icon-hide`]: !showIcon,\n                [`${prefixCls}-block-node`]: blockNode,\n            })} checkable={checkable ? <span className={`${prefixCls}-checkbox-inner`}/> : checkable} switcherIcon={(nodeProps) => this.renderSwitcherIcon(prefixCls, switcherIcon, nodeProps)}>\n        {children}\n      </RcTree>);\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderTree}</ConfigConsumer>;\n    }\n}\nTree.TreeNode = TreeNode;\nTree.DirectoryTree = DirectoryTree;\nTree.defaultProps = {\n    checkable: false,\n    showIcon: false,\n    motion: Object.assign(Object.assign({}, collapseMotion), { motionAppear: false }),\n    blockNode: false,\n};\n"]},"metadata":{},"sourceType":"module"}