{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nimport { getInputClassName } from './Input';\nvar ClearableInputType = tuple('text', 'input');\nexport function hasPrefixSuffix(props) {\n  return !!(props.prefix || props.suffix || props.allowClear);\n}\n\nvar ClearableLabeledInput = /*#__PURE__*/function (_React$Component) {\n  _inherits(ClearableLabeledInput, _React$Component);\n\n  function ClearableLabeledInput() {\n    _classCallCheck(this, ClearableLabeledInput);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ClearableLabeledInput).apply(this, arguments));\n  }\n\n  _createClass(ClearableLabeledInput, [{\n    key: \"renderClearIcon\",\n    value: function renderClearIcon(prefixCls) {\n      var _this$props = this.props,\n          allowClear = _this$props.allowClear,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          inputType = _this$props.inputType,\n          handleReset = _this$props.handleReset;\n\n      if (!allowClear || disabled || value === undefined || value === null || value === '') {\n        return null;\n      }\n\n      var className = inputType === ClearableInputType[0] ? \"\".concat(prefixCls, \"-textarea-clear-icon\") : \"\".concat(prefixCls, \"-clear-icon\");\n      return React.createElement(Icon, {\n        type: \"close-circle\",\n        theme: \"filled\",\n        onClick: handleReset,\n        className: className,\n        role: \"button\"\n      });\n    }\n  }, {\n    key: \"renderSuffix\",\n    value: function renderSuffix(prefixCls) {\n      var _this$props2 = this.props,\n          suffix = _this$props2.suffix,\n          allowClear = _this$props2.allowClear;\n\n      if (suffix || allowClear) {\n        return React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-suffix\")\n        }, this.renderClearIcon(prefixCls), suffix);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderLabeledIcon\",\n    value: function renderLabeledIcon(prefixCls, element) {\n      var _classNames;\n\n      var props = this.props;\n      var suffix = this.renderSuffix(prefixCls);\n\n      if (!hasPrefixSuffix(props)) {\n        return React.cloneElement(element, {\n          value: props.value\n        });\n      }\n\n      var prefix = props.prefix ? React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-prefix\")\n      }, props.prefix) : null;\n      var affixWrapperCls = classNames(props.className, \"\".concat(prefixCls, \"-affix-wrapper\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-sm\"), props.size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-lg\"), props.size === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-input-with-clear-btn\"), props.suffix && props.allowClear && this.props.value), _classNames));\n      return React.createElement(\"span\", {\n        className: affixWrapperCls,\n        style: props.style\n      }, prefix, React.cloneElement(element, {\n        style: null,\n        value: props.value,\n        className: getInputClassName(prefixCls, props.size, props.disabled)\n      }), suffix);\n    }\n  }, {\n    key: \"renderInputWithLabel\",\n    value: function renderInputWithLabel(prefixCls, labeledElement) {\n      var _classNames3;\n\n      var _this$props3 = this.props,\n          addonBefore = _this$props3.addonBefore,\n          addonAfter = _this$props3.addonAfter,\n          style = _this$props3.style,\n          size = _this$props3.size,\n          className = _this$props3.className; // Not wrap when there is not addons\n\n      if (!addonBefore && !addonAfter) {\n        return labeledElement;\n      }\n\n      var wrapperClassName = \"\".concat(prefixCls, \"-group\");\n      var addonClassName = \"\".concat(wrapperClassName, \"-addon\");\n      var addonBeforeNode = addonBefore ? React.createElement(\"span\", {\n        className: addonClassName\n      }, addonBefore) : null;\n      var addonAfterNode = addonAfter ? React.createElement(\"span\", {\n        className: addonClassName\n      }, addonAfter) : null;\n      var mergedWrapperClassName = classNames(\"\".concat(prefixCls, \"-wrapper\"), _defineProperty({}, wrapperClassName, addonBefore || addonAfter));\n      var mergedGroupClassName = classNames(className, \"\".concat(prefixCls, \"-group-wrapper\"), (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-group-wrapper-sm\"), size === 'small'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-group-wrapper-lg\"), size === 'large'), _classNames3)); // Need another wrapper for changing display:table to display:inline-block\n      // and put style prop in wrapper\n\n      return React.createElement(\"span\", {\n        className: mergedGroupClassName,\n        style: style\n      }, React.createElement(\"span\", {\n        className: mergedWrapperClassName\n      }, addonBeforeNode, React.cloneElement(labeledElement, {\n        style: null\n      }), addonAfterNode));\n    }\n  }, {\n    key: \"renderTextAreaWithClearIcon\",\n    value: function renderTextAreaWithClearIcon(prefixCls, element) {\n      var _this$props4 = this.props,\n          value = _this$props4.value,\n          allowClear = _this$props4.allowClear,\n          className = _this$props4.className,\n          style = _this$props4.style;\n\n      if (!allowClear) {\n        return React.cloneElement(element, {\n          value: value\n        });\n      }\n\n      var affixWrapperCls = classNames(className, \"\".concat(prefixCls, \"-affix-wrapper\"), \"\".concat(prefixCls, \"-affix-wrapper-textarea-with-clear-btn\"));\n      return React.createElement(\"span\", {\n        className: affixWrapperCls,\n        style: style\n      }, React.cloneElement(element, {\n        style: null,\n        value: value\n      }), this.renderClearIcon(prefixCls));\n    }\n  }, {\n    key: \"renderClearableLabeledInput\",\n    value: function renderClearableLabeledInput() {\n      var _this$props5 = this.props,\n          prefixCls = _this$props5.prefixCls,\n          inputType = _this$props5.inputType,\n          element = _this$props5.element;\n\n      if (inputType === ClearableInputType[0]) {\n        return this.renderTextAreaWithClearIcon(prefixCls, element);\n      }\n\n      return this.renderInputWithLabel(prefixCls, this.renderLabeledIcon(prefixCls, element));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.renderClearableLabeledInput();\n    }\n  }]);\n\n  return ClearableLabeledInput;\n}(React.Component);\n\npolyfill(ClearableLabeledInput);\nexport default ClearableLabeledInput;","map":{"version":3,"mappings":"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","names":["React","polyfill","classNames","Icon","tuple","getInputClassName","ClearableInputType","hasPrefixSuffix","props","prefix","suffix","allowClear","ClearableLabeledInput","prefixCls","value","disabled","inputType","handleReset","undefined","className","type","theme","onClick","role","renderClearIcon","element","renderSuffix","cloneElement","affixWrapperCls","size","style","labeledElement","addonBefore","addonAfter","wrapperClassName","addonClassName","addonBeforeNode","addonAfterNode","mergedWrapperClassName","mergedGroupClassName","renderTextAreaWithClearIcon","renderInputWithLabel","renderLabeledIcon","renderClearableLabeledInput","Component"],"sources":["input/ClearableLabeledInput.jsx"],"sourcesContent":["import * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nimport { getInputClassName } from './Input';\nconst ClearableInputType = tuple('text', 'input');\nexport function hasPrefixSuffix(props) {\n    return !!(props.prefix || props.suffix || props.allowClear);\n}\nclass ClearableLabeledInput extends React.Component {\n    renderClearIcon(prefixCls) {\n        const { allowClear, value, disabled, inputType, handleReset } = this.props;\n        if (!allowClear || disabled || value === undefined || value === null || value === '') {\n            return null;\n        }\n        const className = inputType === ClearableInputType[0]\n            ? `${prefixCls}-textarea-clear-icon`\n            : `${prefixCls}-clear-icon`;\n        return (<Icon type=\"close-circle\" theme=\"filled\" onClick={handleReset} className={className} role=\"button\"/>);\n    }\n    renderSuffix(prefixCls) {\n        const { suffix, allowClear } = this.props;\n        if (suffix || allowClear) {\n            return (<span className={`${prefixCls}-suffix`}>\n          {this.renderClearIcon(prefixCls)}\n          {suffix}\n        </span>);\n        }\n        return null;\n    }\n    renderLabeledIcon(prefixCls, element) {\n        const props = this.props;\n        const suffix = this.renderSuffix(prefixCls);\n        if (!hasPrefixSuffix(props)) {\n            return React.cloneElement(element, {\n                value: props.value,\n            });\n        }\n        const prefix = props.prefix ? (<span className={`${prefixCls}-prefix`}>{props.prefix}</span>) : null;\n        const affixWrapperCls = classNames(props.className, `${prefixCls}-affix-wrapper`, {\n            [`${prefixCls}-affix-wrapper-sm`]: props.size === 'small',\n            [`${prefixCls}-affix-wrapper-lg`]: props.size === 'large',\n            [`${prefixCls}-affix-wrapper-input-with-clear-btn`]: props.suffix && props.allowClear && this.props.value,\n        });\n        return (<span className={affixWrapperCls} style={props.style}>\n        {prefix}\n        {React.cloneElement(element, {\n            style: null,\n            value: props.value,\n            className: getInputClassName(prefixCls, props.size, props.disabled),\n        })}\n        {suffix}\n      </span>);\n    }\n    renderInputWithLabel(prefixCls, labeledElement) {\n        const { addonBefore, addonAfter, style, size, className } = this.props;\n        // Not wrap when there is not addons\n        if (!addonBefore && !addonAfter) {\n            return labeledElement;\n        }\n        const wrapperClassName = `${prefixCls}-group`;\n        const addonClassName = `${wrapperClassName}-addon`;\n        const addonBeforeNode = addonBefore ? (<span className={addonClassName}>{addonBefore}</span>) : null;\n        const addonAfterNode = addonAfter ? <span className={addonClassName}>{addonAfter}</span> : null;\n        const mergedWrapperClassName = classNames(`${prefixCls}-wrapper`, {\n            [wrapperClassName]: addonBefore || addonAfter,\n        });\n        const mergedGroupClassName = classNames(className, `${prefixCls}-group-wrapper`, {\n            [`${prefixCls}-group-wrapper-sm`]: size === 'small',\n            [`${prefixCls}-group-wrapper-lg`]: size === 'large',\n        });\n        // Need another wrapper for changing display:table to display:inline-block\n        // and put style prop in wrapper\n        return (<span className={mergedGroupClassName} style={style}>\n        <span className={mergedWrapperClassName}>\n          {addonBeforeNode}\n          {React.cloneElement(labeledElement, { style: null })}\n          {addonAfterNode}\n        </span>\n      </span>);\n    }\n    renderTextAreaWithClearIcon(prefixCls, element) {\n        const { value, allowClear, className, style } = this.props;\n        if (!allowClear) {\n            return React.cloneElement(element, {\n                value,\n            });\n        }\n        const affixWrapperCls = classNames(className, `${prefixCls}-affix-wrapper`, `${prefixCls}-affix-wrapper-textarea-with-clear-btn`);\n        return (<span className={affixWrapperCls} style={style}>\n        {React.cloneElement(element, {\n            style: null,\n            value,\n        })}\n        {this.renderClearIcon(prefixCls)}\n      </span>);\n    }\n    renderClearableLabeledInput() {\n        const { prefixCls, inputType, element } = this.props;\n        if (inputType === ClearableInputType[0]) {\n            return this.renderTextAreaWithClearIcon(prefixCls, element);\n        }\n        return this.renderInputWithLabel(prefixCls, this.renderLabeledIcon(prefixCls, element));\n    }\n    render() {\n        return this.renderClearableLabeledInput();\n    }\n}\npolyfill(ClearableLabeledInput);\nexport default ClearableLabeledInput;\n"]},"metadata":{},"sourceType":"module"}