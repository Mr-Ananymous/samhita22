{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport debounce from 'lodash/debounce';\nimport { conductExpandParent, convertTreeToEntities } from \"rc-tree/es/util\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport { ConfigConsumer } from '../config-provider';\nimport Tree from './Tree';\nimport { calcRangeKeys, getFullKeyList, convertDirectoryKeysToNodes, getFullKeyListByTreeData } from './util';\nimport Icon from '../icon';\n\nfunction getIcon(props) {\n  var isLeaf = props.isLeaf,\n      expanded = props.expanded;\n\n  if (isLeaf) {\n    return React.createElement(Icon, {\n      type: \"file\"\n    });\n  }\n\n  return React.createElement(Icon, {\n    type: expanded ? 'folder-open' : 'folder'\n  });\n}\n\nvar DirectoryTree = /*#__PURE__*/function (_React$Component) {\n  _inherits(DirectoryTree, _React$Component);\n\n  function DirectoryTree(props) {\n    var _this;\n\n    _classCallCheck(this, DirectoryTree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DirectoryTree).call(this, props));\n\n    _this.onExpand = function (expandedKeys, info) {\n      var onExpand = _this.props.onExpand;\n\n      _this.setUncontrolledState({\n        expandedKeys: expandedKeys\n      }); // Call origin function\n\n\n      if (onExpand) {\n        return onExpand(expandedKeys, info);\n      }\n\n      return undefined;\n    };\n\n    _this.onClick = function (event, node) {\n      var _this$props = _this.props,\n          onClick = _this$props.onClick,\n          expandAction = _this$props.expandAction; // Expand the tree\n\n      if (expandAction === 'click') {\n        _this.onDebounceExpand(event, node);\n      }\n\n      if (onClick) {\n        onClick(event, node);\n      }\n    };\n\n    _this.onDoubleClick = function (event, node) {\n      var _this$props2 = _this.props,\n          onDoubleClick = _this$props2.onDoubleClick,\n          expandAction = _this$props2.expandAction; // Expand the tree\n\n      if (expandAction === 'doubleClick') {\n        _this.onDebounceExpand(event, node);\n      }\n\n      if (onDoubleClick) {\n        onDoubleClick(event, node);\n      }\n    };\n\n    _this.onSelect = function (keys, event) {\n      var _this$props3 = _this.props,\n          onSelect = _this$props3.onSelect,\n          multiple = _this$props3.multiple,\n          children = _this$props3.children;\n      var _this$state$expandedK = _this.state.expandedKeys,\n          expandedKeys = _this$state$expandedK === void 0 ? [] : _this$state$expandedK;\n      var node = event.node,\n          nativeEvent = event.nativeEvent;\n      var _node$props$eventKey = node.props.eventKey,\n          eventKey = _node$props$eventKey === void 0 ? '' : _node$props$eventKey;\n      var newState = {}; // We need wrap this event since some value is not same\n\n      var newEvent = _extends(_extends({}, event), {\n        selected: true\n      }); // Windows / Mac single pick\n\n\n      var ctrlPick = nativeEvent.ctrlKey || nativeEvent.metaKey;\n      var shiftPick = nativeEvent.shiftKey; // Generate new selected keys\n\n      var newSelectedKeys;\n\n      if (multiple && ctrlPick) {\n        // Control click\n        newSelectedKeys = keys;\n        _this.lastSelectedKey = eventKey;\n        _this.cachedSelectedKeys = newSelectedKeys;\n        newEvent.selectedNodes = convertDirectoryKeysToNodes(children, newSelectedKeys);\n      } else if (multiple && shiftPick) {\n        // Shift click\n        newSelectedKeys = Array.from(new Set([].concat(_toConsumableArray(_this.cachedSelectedKeys || []), _toConsumableArray(calcRangeKeys(children, expandedKeys, eventKey, _this.lastSelectedKey)))));\n        newEvent.selectedNodes = convertDirectoryKeysToNodes(children, newSelectedKeys);\n      } else {\n        // Single click\n        newSelectedKeys = [eventKey];\n        _this.lastSelectedKey = eventKey;\n        _this.cachedSelectedKeys = newSelectedKeys;\n        newEvent.selectedNodes = [event.node];\n      }\n\n      newState.selectedKeys = newSelectedKeys;\n\n      if (onSelect) {\n        onSelect(newSelectedKeys, newEvent);\n      }\n\n      _this.setUncontrolledState(newState);\n    };\n\n    _this.setTreeRef = function (node) {\n      _this.tree = node;\n    };\n\n    _this.expandFolderNode = function (event, node) {\n      var isLeaf = node.props.isLeaf;\n\n      if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {\n        return;\n      } // Get internal rc-tree\n\n\n      var internalTree = _this.tree.tree; // Call internal rc-tree expand function\n      // https://github.com/ant-design/ant-design/issues/12567\n\n      internalTree.onNodeExpand(event, node);\n    };\n\n    _this.setUncontrolledState = function (state) {\n      var newState = omit(state, Object.keys(_this.props));\n\n      if (Object.keys(newState).length) {\n        _this.setState(newState);\n      }\n    };\n\n    _this.renderDirectoryTree = function (_ref) {\n      var getPrefixCls = _ref.getPrefixCls;\n\n      var _a = _this.props,\n          customizePrefixCls = _a.prefixCls,\n          className = _a.className,\n          props = __rest(_a, [\"prefixCls\", \"className\"]);\n\n      var _this$state = _this.state,\n          expandedKeys = _this$state.expandedKeys,\n          selectedKeys = _this$state.selectedKeys;\n      var prefixCls = getPrefixCls('tree', customizePrefixCls);\n      var connectClassName = classNames(\"\".concat(prefixCls, \"-directory\"), className);\n      return React.createElement(Tree, _extends({\n        icon: getIcon,\n        ref: _this.setTreeRef\n      }, props, {\n        prefixCls: prefixCls,\n        className: connectClassName,\n        expandedKeys: expandedKeys,\n        selectedKeys: selectedKeys,\n        onSelect: _this.onSelect,\n        onClick: _this.onClick,\n        onDoubleClick: _this.onDoubleClick,\n        onExpand: _this.onExpand\n      }));\n    };\n\n    var defaultExpandAll = props.defaultExpandAll,\n        defaultExpandParent = props.defaultExpandParent,\n        expandedKeys = props.expandedKeys,\n        defaultExpandedKeys = props.defaultExpandedKeys,\n        children = props.children;\n\n    var _convertTreeToEntitie = convertTreeToEntities(children),\n        keyEntities = _convertTreeToEntitie.keyEntities; // Selected keys\n\n\n    _this.state = {\n      selectedKeys: props.selectedKeys || props.defaultSelectedKeys || []\n    }; // Expanded keys\n\n    if (defaultExpandAll) {\n      if (props.treeData) {\n        _this.state.expandedKeys = getFullKeyListByTreeData(props.treeData);\n      } else {\n        _this.state.expandedKeys = getFullKeyList(props.children);\n      }\n    } else if (defaultExpandParent) {\n      _this.state.expandedKeys = conductExpandParent(expandedKeys || defaultExpandedKeys, keyEntities);\n    } else {\n      _this.state.expandedKeys = expandedKeys || defaultExpandedKeys;\n    }\n\n    _this.onDebounceExpand = debounce(_this.expandFolderNode, 200, {\n      leading: true\n    });\n    return _this;\n  }\n\n  _createClass(DirectoryTree, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderDirectoryTree);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      var newState = {};\n\n      if ('expandedKeys' in nextProps) {\n        newState.expandedKeys = nextProps.expandedKeys;\n      }\n\n      if ('selectedKeys' in nextProps) {\n        newState.selectedKeys = nextProps.selectedKeys;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return DirectoryTree;\n}(React.Component);\n\nDirectoryTree.defaultProps = {\n  showIcon: true,\n  expandAction: 'click'\n};\npolyfill(DirectoryTree);\nexport default DirectoryTree;","map":{"version":3,"mappings":"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","names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","classNames","omit","debounce","conductExpandParent","convertTreeToEntities","polyfill","ConfigConsumer","Tree","calcRangeKeys","getFullKeyList","convertDirectoryKeysToNodes","getFullKeyListByTreeData","Icon","getIcon","props","isLeaf","expanded","type","DirectoryTree","_classCallCheck","_this","onExpand","expandedKeys","info","setUncontrolledState","undefined","onClick","event","node","expandAction","onDebounceExpand","onDoubleClick","onSelect","keys","multiple","children","state","nativeEvent","eventKey","newState","newEvent","_extends","selected","ctrlPick","ctrlKey","metaKey","shiftPick","shiftKey","newSelectedKeys","lastSelectedKey","cachedSelectedKeys","selectedNodes","Array","from","Set","selectedKeys","setTreeRef","tree","expandFolderNode","internalTree","onNodeExpand","setState","renderDirectoryTree","getPrefixCls","customizePrefixCls","_a","prefixCls","className","connectClassName","icon","ref","defaultExpandAll","defaultExpandParent","defaultExpandedKeys","keyEntities","defaultSelectedKeys","treeData","leading","nextProps","Component","defaultProps","showIcon"],"sources":["tree/DirectoryTree.jsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport debounce from 'lodash/debounce';\nimport { conductExpandParent, convertTreeToEntities } from 'rc-tree/lib/util';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { ConfigConsumer } from '../config-provider';\nimport Tree from './Tree';\nimport { calcRangeKeys, getFullKeyList, convertDirectoryKeysToNodes, getFullKeyListByTreeData, } from './util';\nimport Icon from '../icon';\nfunction getIcon(props) {\n    const { isLeaf, expanded } = props;\n    if (isLeaf) {\n        return <Icon type=\"file\"/>;\n    }\n    return <Icon type={expanded ? 'folder-open' : 'folder'}/>;\n}\nclass DirectoryTree extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onExpand = (expandedKeys, info) => {\n            const { onExpand } = this.props;\n            this.setUncontrolledState({ expandedKeys });\n            // Call origin function\n            if (onExpand) {\n                return onExpand(expandedKeys, info);\n            }\n            return undefined;\n        };\n        this.onClick = (event, node) => {\n            const { onClick, expandAction } = this.props;\n            // Expand the tree\n            if (expandAction === 'click') {\n                this.onDebounceExpand(event, node);\n            }\n            if (onClick) {\n                onClick(event, node);\n            }\n        };\n        this.onDoubleClick = (event, node) => {\n            const { onDoubleClick, expandAction } = this.props;\n            // Expand the tree\n            if (expandAction === 'doubleClick') {\n                this.onDebounceExpand(event, node);\n            }\n            if (onDoubleClick) {\n                onDoubleClick(event, node);\n            }\n        };\n        this.onSelect = (keys, event) => {\n            const { onSelect, multiple, children } = this.props;\n            const { expandedKeys = [] } = this.state;\n            const { node, nativeEvent } = event;\n            const { eventKey = '' } = node.props;\n            const newState = {};\n            // We need wrap this event since some value is not same\n            const newEvent = Object.assign(Object.assign({}, event), { selected: true });\n            // Windows / Mac single pick\n            const ctrlPick = nativeEvent.ctrlKey || nativeEvent.metaKey;\n            const shiftPick = nativeEvent.shiftKey;\n            // Generate new selected keys\n            let newSelectedKeys;\n            if (multiple && ctrlPick) {\n                // Control click\n                newSelectedKeys = keys;\n                this.lastSelectedKey = eventKey;\n                this.cachedSelectedKeys = newSelectedKeys;\n                newEvent.selectedNodes = convertDirectoryKeysToNodes(children, newSelectedKeys);\n            }\n            else if (multiple && shiftPick) {\n                // Shift click\n                newSelectedKeys = Array.from(new Set([\n                    ...(this.cachedSelectedKeys || []),\n                    ...calcRangeKeys(children, expandedKeys, eventKey, this.lastSelectedKey),\n                ]));\n                newEvent.selectedNodes = convertDirectoryKeysToNodes(children, newSelectedKeys);\n            }\n            else {\n                // Single click\n                newSelectedKeys = [eventKey];\n                this.lastSelectedKey = eventKey;\n                this.cachedSelectedKeys = newSelectedKeys;\n                newEvent.selectedNodes = [event.node];\n            }\n            newState.selectedKeys = newSelectedKeys;\n            if (onSelect) {\n                onSelect(newSelectedKeys, newEvent);\n            }\n            this.setUncontrolledState(newState);\n        };\n        this.setTreeRef = (node) => {\n            this.tree = node;\n        };\n        this.expandFolderNode = (event, node) => {\n            const { isLeaf } = node.props;\n            if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {\n                return;\n            }\n            // Get internal rc-tree\n            const internalTree = this.tree.tree;\n            // Call internal rc-tree expand function\n            // https://github.com/ant-design/ant-design/issues/12567\n            internalTree.onNodeExpand(event, node);\n        };\n        this.setUncontrolledState = (state) => {\n            const newState = omit(state, Object.keys(this.props));\n            if (Object.keys(newState).length) {\n                this.setState(newState);\n            }\n        };\n        this.renderDirectoryTree = ({ getPrefixCls }) => {\n            const _a = this.props, { prefixCls: customizePrefixCls, className } = _a, props = __rest(_a, [\"prefixCls\", \"className\"]);\n            const { expandedKeys, selectedKeys } = this.state;\n            const prefixCls = getPrefixCls('tree', customizePrefixCls);\n            const connectClassName = classNames(`${prefixCls}-directory`, className);\n            return (<Tree icon={getIcon} ref={this.setTreeRef} {...props} prefixCls={prefixCls} className={connectClassName} expandedKeys={expandedKeys} selectedKeys={selectedKeys} onSelect={this.onSelect} onClick={this.onClick} onDoubleClick={this.onDoubleClick} onExpand={this.onExpand}/>);\n        };\n        const { defaultExpandAll, defaultExpandParent, expandedKeys, defaultExpandedKeys, children, } = props;\n        const { keyEntities } = convertTreeToEntities(children);\n        // Selected keys\n        this.state = {\n            selectedKeys: props.selectedKeys || props.defaultSelectedKeys || [],\n        };\n        // Expanded keys\n        if (defaultExpandAll) {\n            if (props.treeData) {\n                this.state.expandedKeys = getFullKeyListByTreeData(props.treeData);\n            }\n            else {\n                this.state.expandedKeys = getFullKeyList(props.children);\n            }\n        }\n        else if (defaultExpandParent) {\n            this.state.expandedKeys = conductExpandParent(expandedKeys || defaultExpandedKeys, keyEntities);\n        }\n        else {\n            this.state.expandedKeys = expandedKeys || defaultExpandedKeys;\n        }\n        this.onDebounceExpand = debounce(this.expandFolderNode, 200, {\n            leading: true,\n        });\n    }\n    static getDerivedStateFromProps(nextProps) {\n        const newState = {};\n        if ('expandedKeys' in nextProps) {\n            newState.expandedKeys = nextProps.expandedKeys;\n        }\n        if ('selectedKeys' in nextProps) {\n            newState.selectedKeys = nextProps.selectedKeys;\n        }\n        return newState;\n    }\n    render() {\n        return <ConfigConsumer>{this.renderDirectoryTree}</ConfigConsumer>;\n    }\n}\nDirectoryTree.defaultProps = {\n    showIcon: true,\n    expandAction: 'click',\n};\npolyfill(DirectoryTree);\nexport default DirectoryTree;\n"]},"metadata":{},"sourceType":"module"}