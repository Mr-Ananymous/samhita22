{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Animate from 'rc-animate';\nimport raf from '../_util/raf';\nimport { tuple } from '../_util/type';\nimport ListItem from './ListItem';\nexport var OmitProps = tuple('handleFilter', 'handleSelect', 'handleSelectAll', 'handleClear', 'body', 'checkedKeys');\n\nvar ListBody = /*#__PURE__*/function (_React$Component) {\n  _inherits(ListBody, _React$Component);\n\n  function ListBody() {\n    var _this;\n\n    _classCallCheck(this, ListBody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListBody).apply(this, arguments));\n    _this.state = {\n      mounted: false\n    };\n\n    _this.onItemSelect = function (item) {\n      var _this$props = _this.props,\n          onItemSelect = _this$props.onItemSelect,\n          selectedKeys = _this$props.selectedKeys;\n      var checked = selectedKeys.indexOf(item.key) >= 0;\n      onItemSelect(item.key, !checked);\n    };\n\n    return _this;\n  }\n\n  _createClass(ListBody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.mountId = raf(function () {\n        _this2.setState({\n          mounted: true\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          filteredRenderItems = _this$props2.filteredRenderItems,\n          lazy = _this$props2.lazy;\n\n      if (prevProps.filteredRenderItems.length !== filteredRenderItems.length && lazy !== false) {\n        // TODO: Replace this with ref when react 15 support removed.\n        var container = findDOMNode(this);\n        raf.cancel(this.lazyId);\n        this.lazyId = raf(function () {\n          if (container) {\n            var scrollEvent = new Event('scroll', {\n              bubbles: true\n            });\n            container.dispatchEvent(scrollEvent);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      raf.cancel(this.mountId);\n      raf.cancel(this.lazyId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var mounted = this.state.mounted;\n      var _this$props3 = this.props,\n          prefixCls = _this$props3.prefixCls,\n          onScroll = _this$props3.onScroll,\n          filteredRenderItems = _this$props3.filteredRenderItems,\n          lazy = _this$props3.lazy,\n          selectedKeys = _this$props3.selectedKeys,\n          globalDisabled = _this$props3.disabled;\n      return React.createElement(Animate, {\n        component: \"ul\",\n        componentProps: {\n          onScroll: onScroll\n        },\n        className: \"\".concat(prefixCls, \"-content\"),\n        transitionName: mounted ? \"\".concat(prefixCls, \"-content-item-highlight\") : '',\n        transitionLeave: false\n      }, filteredRenderItems.map(function (_ref) {\n        var renderedEl = _ref.renderedEl,\n            renderedText = _ref.renderedText,\n            item = _ref.item;\n        var disabled = item.disabled;\n        var checked = selectedKeys.indexOf(item.key) >= 0;\n        return React.createElement(ListItem, {\n          disabled: globalDisabled || disabled,\n          key: item.key,\n          item: item,\n          lazy: lazy,\n          renderedText: renderedText,\n          renderedEl: renderedEl,\n          checked: checked,\n          prefixCls: prefixCls,\n          onClick: _this3.onItemSelect\n        });\n      }));\n    }\n  }]);\n\n  return ListBody;\n}(React.Component);\n\nvar ListBodyWrapper = function ListBodyWrapper(props) {\n  return React.createElement(ListBody, props);\n};\n\nexport default ListBodyWrapper;","map":{"version":3,"mappings":"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","names":["React","findDOMNode","Animate","raf","tuple","ListItem","OmitProps","ListBody","_classCallCheck","_this","arguments","state","mounted","onItemSelect","item","props","selectedKeys","checked","indexOf","key","mountId","_this2","setState","prevProps","filteredRenderItems","lazy","length","container","cancel","lazyId","scrollEvent","Event","bubbles","dispatchEvent","prefixCls","onScroll","globalDisabled","disabled","component","componentProps","className","transitionName","transitionLeave","map","renderedEl","renderedText","onClick","_this3","Component","ListBodyWrapper"],"sources":["transfer/renderListBody.jsx"],"sourcesContent":["import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Animate from 'rc-animate';\nimport raf from '../_util/raf';\nimport { tuple } from '../_util/type';\nimport ListItem from './ListItem';\nexport const OmitProps = tuple('handleFilter', 'handleSelect', 'handleSelectAll', 'handleClear', 'body', 'checkedKeys');\nclass ListBody extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            mounted: false,\n        };\n        this.onItemSelect = (item) => {\n            const { onItemSelect, selectedKeys } = this.props;\n            const checked = selectedKeys.indexOf(item.key) >= 0;\n            onItemSelect(item.key, !checked);\n        };\n    }\n    componentDidMount() {\n        this.mountId = raf(() => {\n            this.setState({ mounted: true });\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { filteredRenderItems, lazy } = this.props;\n        if (prevProps.filteredRenderItems.length !== filteredRenderItems.length && lazy !== false) {\n            // TODO: Replace this with ref when react 15 support removed.\n            const container = findDOMNode(this);\n            raf.cancel(this.lazyId);\n            this.lazyId = raf(() => {\n                if (container) {\n                    const scrollEvent = new Event('scroll', { bubbles: true });\n                    container.dispatchEvent(scrollEvent);\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        raf.cancel(this.mountId);\n        raf.cancel(this.lazyId);\n    }\n    render() {\n        const { mounted } = this.state;\n        const { prefixCls, onScroll, filteredRenderItems, lazy, selectedKeys, disabled: globalDisabled, } = this.props;\n        return (<Animate component=\"ul\" componentProps={{ onScroll }} className={`${prefixCls}-content`} transitionName={mounted ? `${prefixCls}-content-item-highlight` : ''} transitionLeave={false}>\n        {filteredRenderItems.map(({ renderedEl, renderedText, item }) => {\n            const { disabled } = item;\n            const checked = selectedKeys.indexOf(item.key) >= 0;\n            return (<ListItem disabled={globalDisabled || disabled} key={item.key} item={item} lazy={lazy} renderedText={renderedText} renderedEl={renderedEl} checked={checked} prefixCls={prefixCls} onClick={this.onItemSelect}/>);\n        })}\n      </Animate>);\n    }\n}\nconst ListBodyWrapper = (props) => <ListBody {...props}/>;\nexport default ListBodyWrapper;\n"]},"metadata":{},"sourceType":"module"}