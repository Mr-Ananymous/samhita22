{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { withConfigConsumer } from '../config-provider/context';\nimport StatisticNumber from './Number';\n\nvar Statistic = function Statistic(props) {\n  var prefixCls = props.prefixCls,\n      className = props.className,\n      style = props.style,\n      valueStyle = props.valueStyle,\n      _props$value = props.value,\n      value = _props$value === void 0 ? 0 : _props$value,\n      title = props.title,\n      valueRender = props.valueRender,\n      prefix = props.prefix,\n      suffix = props.suffix;\n  var valueNode = React.createElement(StatisticNumber, _extends({}, props, {\n    value: value\n  }));\n\n  if (valueRender) {\n    valueNode = valueRender(valueNode);\n  }\n\n  return React.createElement(\"div\", {\n    className: classNames(prefixCls, className),\n    style: style\n  }, title && React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-title\")\n  }, title), React.createElement(\"div\", {\n    style: valueStyle,\n    className: \"\".concat(prefixCls, \"-content\")\n  }, prefix && React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-prefix\")\n  }, prefix), valueNode, suffix && React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-suffix\")\n  }, suffix)));\n};\n\nStatistic.defaultProps = {\n  decimalSeparator: '.',\n  groupSeparator: ','\n};\nvar WrapperStatistic = withConfigConsumer({\n  prefixCls: 'statistic'\n})(Statistic);\nexport default WrapperStatistic;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,kBAAT,QAAmC,4BAAnC;AACA,OAAOC,eAAP,MAA4B,UAA5B;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,QAAS;AAAA,MACfC,SADe,GAC6EC,KAD7E,CACfD,SADe;AAAA,MACJE,SADI,GAC6ED,KAD7E,CACJC,SADI;AAAA,MACOC,KADP,GAC6EF,KAD7E,CACOE,KADP;AAAA,MACcC,UADd,GAC6EH,KAD7E,CACcG,UADd;AAAA,qBAC6EH,KAD7E,CAC0BI,KAD1B;AAAA,MAC0BA,KAD1B,6BACkC,CADlC;AAAA,MACqCC,KADrC,GAC6EL,KAD7E,CACqCK,KADrC;AAAA,MAC4CC,WAD5C,GAC6EN,KAD7E,CAC4CM,WAD5C;AAAA,MACyDC,MADzD,GAC6EP,KAD7E,CACyDO,MADzD;AAAA,MACiEC,MADjE,GAC6ER,KAD7E,CACiEQ,MADjE;AAEvB,MAAIC,SAAS,GAAGf,oBAACG,eAAD,eAAqBG,KAArB;AAA4BI,SAAK,EAAEA;AAAnC,KAAhB;;AACA,MAAIE,WAAJ,EAAiB;AACbG,aAAS,GAAGH,WAAW,CAACG,SAAD,CAAvBA;AACH;;AACD,SAAQf;AAAKO,aAAS,EAAEN,UAAU,CAACI,SAAD,EAAYE,SAAZ,CAA1B;AAAkDC,SAAK,EAAEA;AAAzD,KACLG,KAAK,IAAIX;AAAKO,aAAS,YAAKF,SAAL;AAAd,KAAuCM,KAAvC,CADJ,EAENX;AAAKQ,SAAK,EAAEC,UAAZ;AAAwBF,aAAS,YAAKF,SAAL;AAAjC,KACGQ,MAAM,IAAIb;AAAMO,aAAS,YAAKF,SAAL;AAAf,KAAiDQ,MAAjD,CADb,EAEGE,SAFH,EAGGD,MAAM,IAAId;AAAMO,aAAS,YAAKF,SAAL;AAAf,KAAiDS,MAAjD,CAHb,CAFM,CAAR;AANJ;;AAeAV,SAAS,CAACY,YAAVZ,GAAyB;AACrBa,kBAAgB,EAAE,GADG;AAErBC,gBAAc,EAAE;AAFK,CAAzBd;AAIA,IAAMe,gBAAgB,GAAGjB,kBAAkB,CAAC;AACxCG,WAAS,EAAE;AAD6B,CAAD,CAAlBH,CAEtBE,SAFsBF,CAAzB;AAGA,eAAeiB,gBAAf","names":["React","classNames","withConfigConsumer","StatisticNumber","Statistic","prefixCls","props","className","style","valueStyle","value","title","valueRender","prefix","suffix","valueNode","defaultProps","decimalSeparator","groupSeparator","WrapperStatistic"],"sources":["statistic/Statistic.jsx"],"sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { withConfigConsumer } from '../config-provider/context';\nimport StatisticNumber from './Number';\nconst Statistic = props => {\n    const { prefixCls, className, style, valueStyle, value = 0, title, valueRender, prefix, suffix, } = props;\n    let valueNode = <StatisticNumber {...props} value={value}/>;\n    if (valueRender) {\n        valueNode = valueRender(valueNode);\n    }\n    return (<div className={classNames(prefixCls, className)} style={style}>\n      {title && <div className={`${prefixCls}-title`}>{title}</div>}\n      <div style={valueStyle} className={`${prefixCls}-content`}>\n        {prefix && <span className={`${prefixCls}-content-prefix`}>{prefix}</span>}\n        {valueNode}\n        {suffix && <span className={`${prefixCls}-content-suffix`}>{suffix}</span>}\n      </div>\n    </div>);\n};\nStatistic.defaultProps = {\n    decimalSeparator: '.',\n    groupSeparator: ',',\n};\nconst WrapperStatistic = withConfigConsumer({\n    prefixCls: 'statistic',\n})(Statistic);\nexport default WrapperStatistic;\n"]},"metadata":{},"sourceType":"module"}