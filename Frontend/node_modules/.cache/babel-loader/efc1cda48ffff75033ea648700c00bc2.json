{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport copy from 'copy-to-clipboard';\nimport omit from 'omit.js';\nimport ResizeObserver from 'rc-resize-observer';\nimport { configConsumerProps } from '../config-provider';\nimport { withConfigConsumer } from '../config-provider/context';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport warning from '../_util/warning';\nimport TransButton from '../_util/transButton';\nimport raf from '../_util/raf';\nimport isStyleSupport from '../_util/styleChecker';\nimport Icon from '../icon';\nimport Tooltip from '../tooltip';\nimport Typography from './Typography';\nimport Editable from './Editable';\nimport measure from './util';\nvar isLineClampSupport = isStyleSupport('webkitLineClamp');\nvar isTextOverflowSupport = isStyleSupport('textOverflow');\n\nfunction wrapperDecorations(_ref, content) {\n  var mark = _ref.mark,\n      code = _ref.code,\n      underline = _ref.underline,\n      del = _ref[\"delete\"],\n      strong = _ref.strong;\n  var currentContent = content;\n\n  function wrap(needed, tag) {\n    if (!needed) return;\n    currentContent = React.createElement(tag, {}, currentContent);\n  }\n\n  wrap(strong, 'strong');\n  wrap(underline, 'u');\n  wrap(del, 'del');\n  wrap(code, 'code');\n  wrap(mark, 'mark');\n  return currentContent;\n}\n\nvar ELLIPSIS_STR = '...';\n\nvar Base = /*#__PURE__*/function (_React$Component) {\n  _inherits(Base, _React$Component);\n\n  function Base() {\n    var _this;\n\n    _classCallCheck(this, Base);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Base).apply(this, arguments));\n    _this.state = {\n      edit: false,\n      copied: false,\n      ellipsisText: '',\n      ellipsisContent: null,\n      isEllipsis: false,\n      expanded: false,\n      clientRendered: false\n    }; // =============== Expend ===============\n\n    _this.onExpandClick = function () {\n      var _this$getEllipsis = _this.getEllipsis(),\n          onExpand = _this$getEllipsis.onExpand;\n\n      _this.setState({\n        expanded: true\n      });\n\n      if (onExpand) {\n        onExpand();\n      }\n    }; // ================ Edit ================\n\n\n    _this.onEditClick = function () {\n      _this.triggerEdit(true);\n    };\n\n    _this.onEditChange = function (value) {\n      var _this$getEditable = _this.getEditable(),\n          onChange = _this$getEditable.onChange;\n\n      if (onChange) {\n        onChange(value);\n      }\n\n      _this.triggerEdit(false);\n    };\n\n    _this.onEditCancel = function () {\n      _this.triggerEdit(false);\n    }; // ================ Copy ================\n\n\n    _this.onCopyClick = function () {\n      var _this$props = _this.props,\n          children = _this$props.children,\n          copyable = _this$props.copyable;\n\n      var copyConfig = _extends({}, _typeof(copyable) === 'object' ? copyable : null);\n\n      if (copyConfig.text === undefined) {\n        copyConfig.text = String(children);\n      }\n\n      copy(copyConfig.text || '');\n\n      _this.setState({\n        copied: true\n      }, function () {\n        if (copyConfig.onCopy) {\n          copyConfig.onCopy();\n        }\n\n        _this.copyId = window.setTimeout(function () {\n          _this.setState({\n            copied: false\n          });\n        }, 3000);\n      });\n    };\n\n    _this.setContentRef = function (node) {\n      _this.content = node;\n    };\n\n    _this.setEditRef = function (node) {\n      _this.editIcon = node;\n    };\n\n    _this.triggerEdit = function (edit) {\n      var _this$getEditable2 = _this.getEditable(),\n          onStart = _this$getEditable2.onStart;\n\n      if (edit && onStart) {\n        onStart();\n      }\n\n      _this.setState({\n        edit: edit\n      }, function () {\n        if (!edit && _this.editIcon) {\n          _this.editIcon.focus();\n        }\n      });\n    }; // ============== Ellipsis ==============\n\n\n    _this.resizeOnNextFrame = function () {\n      raf.cancel(_this.rafId);\n      _this.rafId = raf(function () {\n        // Do not bind `syncEllipsis`. It need for test usage on prototype\n        _this.syncEllipsis();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Base, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        clientRendered: true\n      });\n      this.resizeOnNextFrame();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var children = this.props.children;\n      var ellipsis = this.getEllipsis();\n      var prevEllipsis = this.getEllipsis(prevProps);\n\n      if (children !== prevProps.children || ellipsis.rows !== prevEllipsis.rows) {\n        this.resizeOnNextFrame();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.clearTimeout(this.copyId);\n      raf.cancel(this.rafId);\n    }\n  }, {\n    key: \"getEditable\",\n    value: function getEditable(props) {\n      var edit = this.state.edit;\n\n      var _ref2 = props || this.props,\n          editable = _ref2.editable;\n\n      if (!editable) return {\n        editing: edit\n      };\n      return _extends({\n        editing: edit\n      }, _typeof(editable) === 'object' ? editable : null);\n    }\n  }, {\n    key: \"getEllipsis\",\n    value: function getEllipsis(props) {\n      var _ref3 = props || this.props,\n          ellipsis = _ref3.ellipsis;\n\n      if (!ellipsis) return {};\n      return _extends({\n        rows: 1,\n        expandable: false\n      }, _typeof(ellipsis) === 'object' ? ellipsis : null);\n    }\n  }, {\n    key: \"canUseCSSEllipsis\",\n    value: function canUseCSSEllipsis() {\n      var clientRendered = this.state.clientRendered;\n      var _this$props2 = this.props,\n          editable = _this$props2.editable,\n          copyable = _this$props2.copyable;\n\n      var _this$getEllipsis2 = this.getEllipsis(),\n          rows = _this$getEllipsis2.rows,\n          expandable = _this$getEllipsis2.expandable; // Can't use css ellipsis since we need to provide the place for button\n\n\n      if (editable || copyable || expandable || !clientRendered) {\n        return false;\n      }\n\n      if (rows === 1) {\n        return isTextOverflowSupport;\n      }\n\n      return isLineClampSupport;\n    }\n  }, {\n    key: \"syncEllipsis\",\n    value: function syncEllipsis() {\n      var _this$state = this.state,\n          ellipsisText = _this$state.ellipsisText,\n          isEllipsis = _this$state.isEllipsis,\n          expanded = _this$state.expanded;\n\n      var _this$getEllipsis3 = this.getEllipsis(),\n          rows = _this$getEllipsis3.rows;\n\n      var children = this.props.children;\n      if (!rows || rows < 0 || !this.content || expanded) return; // Do not measure if css already support ellipsis\n\n      if (this.canUseCSSEllipsis()) return;\n      warning(toArray(children).every(function (child) {\n        return typeof child === 'string';\n      }), 'Typography', '`ellipsis` should use string as children only.');\n\n      var _measure = measure(findDOMNode(this.content), rows, children, this.renderOperations(true), ELLIPSIS_STR),\n          content = _measure.content,\n          text = _measure.text,\n          ellipsis = _measure.ellipsis;\n\n      if (ellipsisText !== text || isEllipsis !== ellipsis) {\n        this.setState({\n          ellipsisText: text,\n          ellipsisContent: content,\n          isEllipsis: ellipsis\n        });\n      }\n    }\n  }, {\n    key: \"renderExpand\",\n    value: function renderExpand(forceRender) {\n      var _this$getEllipsis4 = this.getEllipsis(),\n          expandable = _this$getEllipsis4.expandable;\n\n      var prefixCls = this.props.prefixCls;\n      var _this$state2 = this.state,\n          expanded = _this$state2.expanded,\n          isEllipsis = _this$state2.isEllipsis;\n      if (!expandable) return null; // force render expand icon for measure usage or it will cause dead loop\n\n      if (!forceRender && (expanded || !isEllipsis)) return null;\n      return React.createElement(\"a\", {\n        key: \"expand\",\n        className: \"\".concat(prefixCls, \"-expand\"),\n        onClick: this.onExpandClick,\n        \"aria-label\": this.expandStr\n      }, this.expandStr);\n    }\n  }, {\n    key: \"renderEdit\",\n    value: function renderEdit() {\n      var _this$props3 = this.props,\n          editable = _this$props3.editable,\n          prefixCls = _this$props3.prefixCls;\n      if (!editable) return;\n      return React.createElement(Tooltip, {\n        key: \"edit\",\n        title: this.editStr\n      }, React.createElement(TransButton, {\n        ref: this.setEditRef,\n        className: \"\".concat(prefixCls, \"-edit\"),\n        onClick: this.onEditClick,\n        \"aria-label\": this.editStr\n      }, React.createElement(Icon, {\n        role: \"button\",\n        type: \"edit\"\n      })));\n    }\n  }, {\n    key: \"renderCopy\",\n    value: function renderCopy() {\n      var copied = this.state.copied;\n      var _this$props4 = this.props,\n          copyable = _this$props4.copyable,\n          prefixCls = _this$props4.prefixCls;\n      if (!copyable) return;\n      var title = copied ? this.copiedStr : this.copyStr;\n      return React.createElement(Tooltip, {\n        key: \"copy\",\n        title: title\n      }, React.createElement(TransButton, {\n        className: classNames(\"\".concat(prefixCls, \"-copy\"), copied && \"\".concat(prefixCls, \"-copy-success\")),\n        onClick: this.onCopyClick,\n        \"aria-label\": title\n      }, React.createElement(Icon, {\n        role: \"button\",\n        type: copied ? 'check' : 'copy'\n      })));\n    }\n  }, {\n    key: \"renderEditInput\",\n    value: function renderEditInput() {\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          prefixCls = _this$props5.prefixCls,\n          className = _this$props5.className,\n          style = _this$props5.style;\n      return React.createElement(Editable, {\n        value: typeof children === 'string' ? children : '',\n        onSave: this.onEditChange,\n        onCancel: this.onEditCancel,\n        prefixCls: prefixCls,\n        className: className,\n        style: style\n      });\n    }\n  }, {\n    key: \"renderOperations\",\n    value: function renderOperations(forceRenderExpanded) {\n      return [this.renderExpand(forceRenderExpanded), this.renderEdit(), this.renderCopy()].filter(function (node) {\n        return node;\n      });\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          ellipsisContent = _this$state3.ellipsisContent,\n          isEllipsis = _this$state3.isEllipsis,\n          expanded = _this$state3.expanded;\n\n      var _a = this.props,\n          component = _a.component,\n          children = _a.children,\n          className = _a.className,\n          prefixCls = _a.prefixCls,\n          type = _a.type,\n          disabled = _a.disabled,\n          style = _a.style,\n          restProps = __rest(_a, [\"component\", \"children\", \"className\", \"prefixCls\", \"type\", \"disabled\", \"style\"]);\n\n      var _this$getEllipsis5 = this.getEllipsis(),\n          rows = _this$getEllipsis5.rows;\n\n      var textProps = omit(restProps, ['prefixCls', 'editable', 'copyable', 'ellipsis', 'mark', 'underline', 'mark', 'code', 'delete', 'underline', 'strong'].concat(_toConsumableArray(configConsumerProps)));\n      var cssEllipsis = this.canUseCSSEllipsis();\n      var cssTextOverflow = rows === 1 && cssEllipsis;\n      var cssLineClamp = rows && rows > 1 && cssEllipsis;\n      var textNode = children;\n      var ariaLabel = null; // Only use js ellipsis when css ellipsis not support\n\n      if (rows && isEllipsis && !expanded && !cssEllipsis) {\n        ariaLabel = String(children); // We move full content to outer element to avoid repeat read the content by accessibility\n\n        textNode = React.createElement(\"span\", {\n          title: String(children),\n          \"aria-hidden\": \"true\"\n        }, ellipsisContent, ELLIPSIS_STR);\n      }\n\n      textNode = wrapperDecorations(this.props, textNode);\n      return React.createElement(LocaleReceiver, {\n        componentName: \"Text\"\n      }, function (_ref4) {\n        var _classNames;\n\n        var edit = _ref4.edit,\n            copyStr = _ref4.copy,\n            copied = _ref4.copied,\n            expand = _ref4.expand;\n        _this2.editStr = edit;\n        _this2.copyStr = copyStr;\n        _this2.copiedStr = copied;\n        _this2.expandStr = expand;\n        return React.createElement(ResizeObserver, {\n          onResize: _this2.resizeOnNextFrame,\n          disabled: !rows\n        }, React.createElement(Typography, _extends({\n          className: classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(type), type), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-ellipsis\"), rows), _defineProperty(_classNames, \"\".concat(prefixCls, \"-ellipsis-single-line\"), cssTextOverflow), _defineProperty(_classNames, \"\".concat(prefixCls, \"-ellipsis-multiple-line\"), cssLineClamp), _classNames)),\n          style: _extends(_extends({}, style), {\n            WebkitLineClamp: cssLineClamp ? rows : null\n          }),\n          component: component,\n          ref: _this2.setContentRef,\n          \"aria-label\": ariaLabel\n        }, textProps), textNode, _this2.renderOperations()));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$getEditable3 = this.getEditable(),\n          editing = _this$getEditable3.editing;\n\n      if (editing) {\n        return this.renderEditInput();\n      }\n\n      return this.renderContent();\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      var children = nextProps.children,\n          editable = nextProps.editable;\n      warning(!editable || typeof children === 'string', 'Typography', 'When `editable` is enabled, the `children` should use string.');\n      return {};\n    }\n  }]);\n\n  return Base;\n}(React.Component);\n\nBase.defaultProps = {\n  children: ''\n};\npolyfill(Base);\nexport default withConfigConsumer({\n  prefixCls: 'typography'\n})(Base);","map":{"version":3,"mappings":"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","names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","classNames","polyfill","toArray","findDOMNode","copy","omit","ResizeObserver","configConsumerProps","withConfigConsumer","LocaleReceiver","warning","TransButton","raf","isStyleSupport","Icon","Tooltip","Typography","Editable","measure","isLineClampSupport","isTextOverflowSupport","wrapperDecorations","content","mark","code","underline","del","strong","currentContent","wrap","needed","tag","createElement","ELLIPSIS_STR","Base","_classCallCheck","_this","arguments","state","edit","copied","ellipsisText","ellipsisContent","isEllipsis","expanded","clientRendered","onExpandClick","getEllipsis","onExpand","setState","onEditClick","triggerEdit","onEditChange","value","getEditable","onChange","onEditCancel","onCopyClick","props","children","copyable","copyConfig","_extends","_typeof","text","undefined","String","onCopy","copyId","window","setTimeout","setContentRef","node","setEditRef","editIcon","onStart","focus","resizeOnNextFrame","cancel","rafId","syncEllipsis","prevProps","ellipsis","prevEllipsis","rows","clearTimeout","editable","editing","expandable","canUseCSSEllipsis","every","child","renderOperations","forceRender","prefixCls","key","className","onClick","expandStr","title","editStr","ref","role","type","copiedStr","copyStr","style","onSave","onCancel","forceRenderExpanded","renderExpand","renderEdit","renderCopy","filter","component","_a","disabled","restProps","textProps","cssEllipsis","cssTextOverflow","cssLineClamp","textNode","ariaLabel","componentName","expand","_this2","onResize","WebkitLineClamp","renderEditInput","renderContent","nextProps","Component","defaultProps"],"sources":["typography/Base.jsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport findDOMNode from 'rc-util/lib/Dom/findDOMNode';\nimport copy from 'copy-to-clipboard';\nimport omit from 'omit.js';\nimport ResizeObserver from 'rc-resize-observer';\nimport { configConsumerProps } from '../config-provider';\nimport { withConfigConsumer } from '../config-provider/context';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport warning from '../_util/warning';\nimport TransButton from '../_util/transButton';\nimport raf from '../_util/raf';\nimport isStyleSupport from '../_util/styleChecker';\nimport Icon from '../icon';\nimport Tooltip from '../tooltip';\nimport Typography from './Typography';\nimport Editable from './Editable';\nimport measure from './util';\nconst isLineClampSupport = isStyleSupport('webkitLineClamp');\nconst isTextOverflowSupport = isStyleSupport('textOverflow');\nfunction wrapperDecorations({ mark, code, underline, delete: del, strong }, content) {\n    let currentContent = content;\n    function wrap(needed, tag) {\n        if (!needed)\n            return;\n        currentContent = React.createElement(tag, {}, currentContent);\n    }\n    wrap(strong, 'strong');\n    wrap(underline, 'u');\n    wrap(del, 'del');\n    wrap(code, 'code');\n    wrap(mark, 'mark');\n    return currentContent;\n}\nconst ELLIPSIS_STR = '...';\nclass Base extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            edit: false,\n            copied: false,\n            ellipsisText: '',\n            ellipsisContent: null,\n            isEllipsis: false,\n            expanded: false,\n            clientRendered: false,\n        };\n        // =============== Expend ===============\n        this.onExpandClick = () => {\n            const { onExpand } = this.getEllipsis();\n            this.setState({ expanded: true });\n            if (onExpand) {\n                onExpand();\n            }\n        };\n        // ================ Edit ================\n        this.onEditClick = () => {\n            this.triggerEdit(true);\n        };\n        this.onEditChange = (value) => {\n            const { onChange } = this.getEditable();\n            if (onChange) {\n                onChange(value);\n            }\n            this.triggerEdit(false);\n        };\n        this.onEditCancel = () => {\n            this.triggerEdit(false);\n        };\n        // ================ Copy ================\n        this.onCopyClick = () => {\n            const { children, copyable } = this.props;\n            const copyConfig = Object.assign({}, (typeof copyable === 'object' ? copyable : null));\n            if (copyConfig.text === undefined) {\n                copyConfig.text = String(children);\n            }\n            copy(copyConfig.text || '');\n            this.setState({ copied: true }, () => {\n                if (copyConfig.onCopy) {\n                    copyConfig.onCopy();\n                }\n                this.copyId = window.setTimeout(() => {\n                    this.setState({ copied: false });\n                }, 3000);\n            });\n        };\n        this.setContentRef = (node) => {\n            this.content = node;\n        };\n        this.setEditRef = (node) => {\n            this.editIcon = node;\n        };\n        this.triggerEdit = (edit) => {\n            const { onStart } = this.getEditable();\n            if (edit && onStart) {\n                onStart();\n            }\n            this.setState({ edit }, () => {\n                if (!edit && this.editIcon) {\n                    this.editIcon.focus();\n                }\n            });\n        };\n        // ============== Ellipsis ==============\n        this.resizeOnNextFrame = () => {\n            raf.cancel(this.rafId);\n            this.rafId = raf(() => {\n                // Do not bind `syncEllipsis`. It need for test usage on prototype\n                this.syncEllipsis();\n            });\n        };\n    }\n    static getDerivedStateFromProps(nextProps) {\n        const { children, editable } = nextProps;\n        warning(!editable || typeof children === 'string', 'Typography', 'When `editable` is enabled, the `children` should use string.');\n        return {};\n    }\n    componentDidMount() {\n        this.setState({ clientRendered: true });\n        this.resizeOnNextFrame();\n    }\n    componentDidUpdate(prevProps) {\n        const { children } = this.props;\n        const ellipsis = this.getEllipsis();\n        const prevEllipsis = this.getEllipsis(prevProps);\n        if (children !== prevProps.children || ellipsis.rows !== prevEllipsis.rows) {\n            this.resizeOnNextFrame();\n        }\n    }\n    componentWillUnmount() {\n        window.clearTimeout(this.copyId);\n        raf.cancel(this.rafId);\n    }\n    getEditable(props) {\n        const { edit } = this.state;\n        const { editable } = props || this.props;\n        if (!editable)\n            return { editing: edit };\n        return Object.assign({ editing: edit }, (typeof editable === 'object' ? editable : null));\n    }\n    getEllipsis(props) {\n        const { ellipsis } = props || this.props;\n        if (!ellipsis)\n            return {};\n        return Object.assign({ rows: 1, expandable: false }, (typeof ellipsis === 'object' ? ellipsis : null));\n    }\n    canUseCSSEllipsis() {\n        const { clientRendered } = this.state;\n        const { editable, copyable } = this.props;\n        const { rows, expandable } = this.getEllipsis();\n        // Can't use css ellipsis since we need to provide the place for button\n        if (editable || copyable || expandable || !clientRendered) {\n            return false;\n        }\n        if (rows === 1) {\n            return isTextOverflowSupport;\n        }\n        return isLineClampSupport;\n    }\n    syncEllipsis() {\n        const { ellipsisText, isEllipsis, expanded } = this.state;\n        const { rows } = this.getEllipsis();\n        const { children } = this.props;\n        if (!rows || rows < 0 || !this.content || expanded)\n            return;\n        // Do not measure if css already support ellipsis\n        if (this.canUseCSSEllipsis())\n            return;\n        warning(toArray(children).every((child) => typeof child === 'string'), 'Typography', '`ellipsis` should use string as children only.');\n        const { content, text, ellipsis } = measure(findDOMNode(this.content), rows, children, this.renderOperations(true), ELLIPSIS_STR);\n        if (ellipsisText !== text || isEllipsis !== ellipsis) {\n            this.setState({ ellipsisText: text, ellipsisContent: content, isEllipsis: ellipsis });\n        }\n    }\n    renderExpand(forceRender) {\n        const { expandable } = this.getEllipsis();\n        const { prefixCls } = this.props;\n        const { expanded, isEllipsis } = this.state;\n        if (!expandable)\n            return null;\n        // force render expand icon for measure usage or it will cause dead loop\n        if (!forceRender && (expanded || !isEllipsis))\n            return null;\n        return (<a key=\"expand\" className={`${prefixCls}-expand`} onClick={this.onExpandClick} aria-label={this.expandStr}>\n        {this.expandStr}\n      </a>);\n    }\n    renderEdit() {\n        const { editable, prefixCls } = this.props;\n        if (!editable)\n            return;\n        return (<Tooltip key=\"edit\" title={this.editStr}>\n        <TransButton ref={this.setEditRef} className={`${prefixCls}-edit`} onClick={this.onEditClick} aria-label={this.editStr}>\n          <Icon role=\"button\" type=\"edit\"/>\n        </TransButton>\n      </Tooltip>);\n    }\n    renderCopy() {\n        const { copied } = this.state;\n        const { copyable, prefixCls } = this.props;\n        if (!copyable)\n            return;\n        const title = copied ? this.copiedStr : this.copyStr;\n        return (<Tooltip key=\"copy\" title={title}>\n        <TransButton className={classNames(`${prefixCls}-copy`, copied && `${prefixCls}-copy-success`)} onClick={this.onCopyClick} aria-label={title}>\n          <Icon role=\"button\" type={copied ? 'check' : 'copy'}/>\n        </TransButton>\n      </Tooltip>);\n    }\n    renderEditInput() {\n        const { children, prefixCls, className, style } = this.props;\n        return (<Editable value={typeof children === 'string' ? children : ''} onSave={this.onEditChange} onCancel={this.onEditCancel} prefixCls={prefixCls} className={className} style={style}/>);\n    }\n    renderOperations(forceRenderExpanded) {\n        return [this.renderExpand(forceRenderExpanded), this.renderEdit(), this.renderCopy()].filter(node => node);\n    }\n    renderContent() {\n        const { ellipsisContent, isEllipsis, expanded } = this.state;\n        const _a = this.props, { component, children, className, prefixCls, type, disabled, style } = _a, restProps = __rest(_a, [\"component\", \"children\", \"className\", \"prefixCls\", \"type\", \"disabled\", \"style\"]);\n        const { rows } = this.getEllipsis();\n        const textProps = omit(restProps, [\n            'prefixCls',\n            'editable',\n            'copyable',\n            'ellipsis',\n            'mark',\n            'underline',\n            'mark',\n            'code',\n            'delete',\n            'underline',\n            'strong',\n            ...configConsumerProps,\n        ]);\n        const cssEllipsis = this.canUseCSSEllipsis();\n        const cssTextOverflow = rows === 1 && cssEllipsis;\n        const cssLineClamp = rows && rows > 1 && cssEllipsis;\n        let textNode = children;\n        let ariaLabel = null;\n        // Only use js ellipsis when css ellipsis not support\n        if (rows && isEllipsis && !expanded && !cssEllipsis) {\n            ariaLabel = String(children);\n            // We move full content to outer element to avoid repeat read the content by accessibility\n            textNode = (<span title={String(children)} aria-hidden=\"true\">\n          {ellipsisContent}\n          {ELLIPSIS_STR}\n        </span>);\n        }\n        textNode = wrapperDecorations(this.props, textNode);\n        return (<LocaleReceiver componentName=\"Text\">\n        {({ edit, copy: copyStr, copied, expand }) => {\n            this.editStr = edit;\n            this.copyStr = copyStr;\n            this.copiedStr = copied;\n            this.expandStr = expand;\n            return (<ResizeObserver onResize={this.resizeOnNextFrame} disabled={!rows}>\n              <Typography className={classNames(className, {\n                [`${prefixCls}-${type}`]: type,\n                [`${prefixCls}-disabled`]: disabled,\n                [`${prefixCls}-ellipsis`]: rows,\n                [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,\n                [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp,\n            })} style={Object.assign(Object.assign({}, style), { WebkitLineClamp: cssLineClamp ? rows : null })} component={component} ref={this.setContentRef} aria-label={ariaLabel} {...textProps}>\n                {textNode}\n                {this.renderOperations()}\n              </Typography>\n            </ResizeObserver>);\n        }}\n      </LocaleReceiver>);\n    }\n    render() {\n        const { editing } = this.getEditable();\n        if (editing) {\n            return this.renderEditInput();\n        }\n        return this.renderContent();\n    }\n}\nBase.defaultProps = {\n    children: '',\n};\npolyfill(Base);\nexport default withConfigConsumer({\n    prefixCls: 'typography',\n})(Base);\n"]},"metadata":{},"sourceType":"module"}