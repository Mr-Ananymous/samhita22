{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nexport default function InputIcon(props) {\n  var _classNames;\n\n  var suffixIcon = props.suffixIcon,\n      prefixCls = props.prefixCls;\n  return suffixIcon && (React.isValidElement(suffixIcon) ? React.cloneElement(suffixIcon, {\n    className: classNames((_classNames = {}, _defineProperty(_classNames, suffixIcon.props.className, suffixIcon.props.className), _defineProperty(_classNames, \"\".concat(prefixCls, \"-picker-icon\"), true), _classNames))\n  }) : React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-picker-icon\")\n  }, suffixIcon)) || React.createElement(Icon, {\n    type: \"calendar\",\n    className: \"\".concat(prefixCls, \"-picker-icon\")\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAAA,MAC7BC,UAD6B,GACHD,KADG,CAC7BC,UAD6B;AAAA,MACjBC,SADiB,GACHF,KADG,CACjBE,SADiB;AAErC,SAASD,UAAU,KACdL,KAAK,CAACO,cAANP,CAAqBK,UAArBL,IAAoCA,KAAK,CAACQ,YAANR,CAAmBK,UAAnBL,EAA+B;AAChES,aAAS,EAAER,UAAU,iDAChBI,UAAU,CAACD,KAAXC,CAAiBI,SADD,EACaJ,UAAU,CAACD,KAAXC,CAAiBI,SAD9B,0CAEbH,SAFa,mBAEa,IAFb;AAD2C,GAA/BN,CAApCA,GAKMA;AAAMS,aAAS,YAAKH,SAAL;AAAf,KAA8CD,UAA9C,CANQ,CAAVA,IAMyEL,oBAACE,IAAD;AAAMQ,QAAI,EAAC,UAAX;AAAsBD,aAAS,YAAKH,SAAL;AAA/B,IANlF;AAOH","names":["React","classNames","Icon","InputIcon","props","suffixIcon","prefixCls","isValidElement","cloneElement","className","type"],"sources":["date-picker/InputIcon.jsx"],"sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nexport default function InputIcon(props) {\n    const { suffixIcon, prefixCls } = props;\n    return ((suffixIcon &&\n        (React.isValidElement(suffixIcon) ? (React.cloneElement(suffixIcon, {\n            className: classNames({\n                [suffixIcon.props.className]: suffixIcon.props.className,\n                [`${prefixCls}-picker-icon`]: true,\n            }),\n        })) : (<span className={`${prefixCls}-picker-icon`}>{suffixIcon}</span>))) || <Icon type=\"calendar\" className={`${prefixCls}-picker-icon`}/>);\n}\n"]},"metadata":{},"sourceType":"module"}