{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport RcUpload from 'rc-upload';\nimport classNames from 'classnames';\nimport uniqBy from 'lodash/uniqBy';\nimport findIndex from 'lodash/findIndex';\nimport UploadList from './UploadList';\nimport { T, fileToObject, genPercentAdd, getFileItem, removeFileItem } from './utils';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from '../locale/default';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\n\nvar Upload = /*#__PURE__*/function (_React$Component) {\n  _inherits(Upload, _React$Component);\n\n  function Upload(props) {\n    var _this;\n\n    _classCallCheck(this, Upload);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Upload).call(this, props));\n\n    _this.saveUpload = function (node) {\n      _this.upload = node;\n    };\n\n    _this.onStart = function (file) {\n      var fileList = _this.state.fileList;\n      var targetItem = fileToObject(file);\n      targetItem.status = 'uploading';\n      var nextFileList = fileList.concat();\n      var fileIndex = findIndex(nextFileList, function (_ref) {\n        var uid = _ref.uid;\n        return uid === targetItem.uid;\n      });\n\n      if (fileIndex === -1) {\n        nextFileList.push(targetItem);\n      } else {\n        nextFileList[fileIndex] = targetItem;\n      }\n\n      _this.onChange({\n        file: targetItem,\n        fileList: nextFileList\n      }); // fix ie progress\n\n\n      if (!window.File || process.env.TEST_IE) {\n        _this.autoUpdateProgress(0, targetItem);\n      }\n    };\n\n    _this.onSuccess = function (response, file, xhr) {\n      _this.clearProgressTimer();\n\n      try {\n        if (typeof response === 'string') {\n          response = JSON.parse(response);\n        }\n      } catch (e) {\n        /* do nothing */\n      }\n\n      var fileList = _this.state.fileList;\n      var targetItem = getFileItem(file, fileList); // removed\n\n      if (!targetItem) {\n        return;\n      }\n\n      targetItem.status = 'done';\n      targetItem.response = response;\n      targetItem.xhr = xhr;\n\n      _this.onChange({\n        file: _extends({}, targetItem),\n        fileList: fileList\n      });\n    };\n\n    _this.onProgress = function (e, file) {\n      var fileList = _this.state.fileList;\n      var targetItem = getFileItem(file, fileList); // removed\n\n      if (!targetItem) {\n        return;\n      }\n\n      targetItem.percent = e.percent;\n\n      _this.onChange({\n        event: e,\n        file: _extends({}, targetItem),\n        fileList: fileList\n      });\n    };\n\n    _this.onError = function (error, response, file) {\n      _this.clearProgressTimer();\n\n      var fileList = _this.state.fileList;\n      var targetItem = getFileItem(file, fileList); // removed\n\n      if (!targetItem) {\n        return;\n      }\n\n      targetItem.error = error;\n      targetItem.response = response;\n      targetItem.status = 'error';\n\n      _this.onChange({\n        file: _extends({}, targetItem),\n        fileList: fileList\n      });\n    };\n\n    _this.handleRemove = function (file) {\n      var onRemove = _this.props.onRemove;\n      var fileList = _this.state.fileList;\n      Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(function (ret) {\n        // Prevent removing file\n        if (ret === false) {\n          return;\n        }\n\n        var removedFileList = removeFileItem(file, fileList);\n\n        if (removedFileList) {\n          file.status = 'removed'; // eslint-disable-line\n\n          if (_this.upload) {\n            _this.upload.abort(file);\n          }\n\n          _this.onChange({\n            file: file,\n            fileList: removedFileList\n          });\n        }\n      });\n    };\n\n    _this.onChange = function (info) {\n      if (!('fileList' in _this.props)) {\n        _this.setState({\n          fileList: info.fileList\n        });\n      }\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange(info);\n      }\n    };\n\n    _this.onFileDrop = function (e) {\n      _this.setState({\n        dragState: e.type\n      });\n    };\n\n    _this.beforeUpload = function (file, fileList) {\n      var beforeUpload = _this.props.beforeUpload;\n      var stateFileList = _this.state.fileList;\n\n      if (!beforeUpload) {\n        return true;\n      }\n\n      var result = beforeUpload(file, fileList);\n\n      if (result === false) {\n        _this.onChange({\n          file: file,\n          fileList: uniqBy(stateFileList.concat(fileList.map(fileToObject)), function (item) {\n            return item.uid;\n          })\n        });\n\n        return false;\n      }\n\n      if (result && result.then) {\n        return result;\n      }\n\n      return true;\n    };\n\n    _this.renderUploadList = function (locale) {\n      var _this$props = _this.props,\n          showUploadList = _this$props.showUploadList,\n          listType = _this$props.listType,\n          onPreview = _this$props.onPreview,\n          onDownload = _this$props.onDownload,\n          previewFile = _this$props.previewFile,\n          disabled = _this$props.disabled,\n          propLocale = _this$props.locale;\n      var showRemoveIcon = showUploadList.showRemoveIcon,\n          showPreviewIcon = showUploadList.showPreviewIcon,\n          showDownloadIcon = showUploadList.showDownloadIcon;\n      var fileList = _this.state.fileList;\n      return React.createElement(UploadList, {\n        listType: listType,\n        items: fileList,\n        previewFile: previewFile,\n        onPreview: onPreview,\n        onDownload: onDownload,\n        onRemove: _this.handleRemove,\n        showRemoveIcon: !disabled && showRemoveIcon,\n        showPreviewIcon: showPreviewIcon,\n        showDownloadIcon: showDownloadIcon,\n        locale: _extends(_extends({}, locale), propLocale)\n      });\n    };\n\n    _this.renderUpload = function (_ref2) {\n      var _classNames2;\n\n      var getPrefixCls = _ref2.getPrefixCls;\n      var _this$props2 = _this.props,\n          customizePrefixCls = _this$props2.prefixCls,\n          className = _this$props2.className,\n          showUploadList = _this$props2.showUploadList,\n          listType = _this$props2.listType,\n          type = _this$props2.type,\n          disabled = _this$props2.disabled,\n          children = _this$props2.children,\n          style = _this$props2.style;\n      var _this$state = _this.state,\n          fileList = _this$state.fileList,\n          dragState = _this$state.dragState;\n      var prefixCls = getPrefixCls('upload', customizePrefixCls);\n\n      var rcUploadProps = _extends(_extends({\n        onStart: _this.onStart,\n        onError: _this.onError,\n        onProgress: _this.onProgress,\n        onSuccess: _this.onSuccess\n      }, _this.props), {\n        prefixCls: prefixCls,\n        beforeUpload: _this.beforeUpload\n      });\n\n      delete rcUploadProps.className;\n      delete rcUploadProps.style;\n      var uploadList = showUploadList ? React.createElement(LocaleReceiver, {\n        componentName: \"Upload\",\n        defaultLocale: defaultLocale.Upload\n      }, _this.renderUploadList) : null;\n\n      if (type === 'drag') {\n        var _classNames;\n\n        var dragCls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-drag\"), true), _defineProperty(_classNames, \"\".concat(prefixCls, \"-drag-uploading\"), fileList.some(function (file) {\n          return file.status === 'uploading';\n        })), _defineProperty(_classNames, \"\".concat(prefixCls, \"-drag-hover\"), dragState === 'dragover'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _classNames), className);\n        return React.createElement(\"span\", null, React.createElement(\"div\", {\n          className: dragCls,\n          onDrop: _this.onFileDrop,\n          onDragOver: _this.onFileDrop,\n          onDragLeave: _this.onFileDrop,\n          style: style\n        }, React.createElement(RcUpload, _extends({}, rcUploadProps, {\n          ref: _this.saveUpload,\n          className: \"\".concat(prefixCls, \"-btn\")\n        }), React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-drag-container\")\n        }, children))), uploadList);\n      }\n\n      var uploadButtonCls = classNames(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-select\"), true), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-select-\").concat(listType), true), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-disabled\"), disabled), _classNames2)); // Remove id to avoid open by label when trigger is hidden\n      // https://github.com/ant-design/ant-design/issues/14298\n      // https://github.com/ant-design/ant-design/issues/16478\n\n      if (!children || disabled) {\n        delete rcUploadProps.id;\n      }\n\n      var uploadButton = React.createElement(\"div\", {\n        className: uploadButtonCls,\n        style: children ? undefined : {\n          display: 'none'\n        }\n      }, React.createElement(RcUpload, _extends({}, rcUploadProps, {\n        ref: _this.saveUpload\n      })));\n\n      if (listType === 'picture-card') {\n        return React.createElement(\"span\", {\n          className: classNames(className, \"\".concat(prefixCls, \"-picture-card-wrapper\"))\n        }, uploadList, uploadButton);\n      }\n\n      return React.createElement(\"span\", {\n        className: className\n      }, uploadButton, uploadList);\n    };\n\n    _this.state = {\n      fileList: props.fileList || props.defaultFileList || [],\n      dragState: 'drop'\n    };\n    warning('fileList' in props || !('value' in props), 'Upload', '`value` is not validate prop, do you mean `fileList`?');\n    return _this;\n  }\n\n  _createClass(Upload, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearProgressTimer();\n    }\n  }, {\n    key: \"clearProgressTimer\",\n    value: function clearProgressTimer() {\n      clearInterval(this.progressTimer);\n    }\n  }, {\n    key: \"autoUpdateProgress\",\n    value: function autoUpdateProgress(_, file) {\n      var _this2 = this;\n\n      var getPercent = genPercentAdd();\n      var curPercent = 0;\n      this.clearProgressTimer();\n      this.progressTimer = setInterval(function () {\n        curPercent = getPercent(curPercent);\n\n        _this2.onProgress({\n          percent: curPercent * 100\n        }, file);\n      }, 200);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderUpload);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      if ('fileList' in nextProps) {\n        return {\n          fileList: nextProps.fileList || []\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Upload;\n}(React.Component);\n\nUpload.defaultProps = {\n  type: 'select',\n  multiple: false,\n  action: '',\n  data: {},\n  accept: '',\n  beforeUpload: T,\n  showUploadList: true,\n  listType: 'text',\n  className: '',\n  disabled: false,\n  supportServerRender: true\n};\npolyfill(Upload);\nexport default Upload;","map":{"version":3,"mappings":"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","names":["React","polyfill","RcUpload","classNames","uniqBy","findIndex","UploadList","T","fileToObject","genPercentAdd","getFileItem","removeFileItem","LocaleReceiver","defaultLocale","ConfigConsumer","warning","Upload","props","_classCallCheck","_this","saveUpload","node","upload","onStart","file","fileList","state","targetItem","status","nextFileList","concat","fileIndex","uid","push","onChange","window","File","process","env","TEST_IE","autoUpdateProgress","onSuccess","response","xhr","clearProgressTimer","JSON","parse","e","_extends","onProgress","percent","event","onError","error","handleRemove","onRemove","Promise","resolve","then","ret","removedFileList","abort","info","setState","onFileDrop","dragState","type","beforeUpload","stateFileList","result","map","item","renderUploadList","locale","showUploadList","listType","onPreview","onDownload","previewFile","disabled","propLocale","showRemoveIcon","showPreviewIcon","showDownloadIcon","items","renderUpload","getPrefixCls","customizePrefixCls","prefixCls","className","children","style","rcUploadProps","uploadList","componentName","dragCls","some","onDrop","onDragOver","onDragLeave","ref","uploadButtonCls","id","uploadButton","undefined","display","defaultFileList","clearInterval","progressTimer","_","getPercent","curPercent","setInterval","_this2","nextProps","Component","defaultProps","multiple","action","data","accept","supportServerRender"],"sources":["upload/Upload.jsx"],"sourcesContent":["import * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport RcUpload from 'rc-upload';\nimport classNames from 'classnames';\nimport uniqBy from 'lodash/uniqBy';\nimport findIndex from 'lodash/findIndex';\nimport UploadList from './UploadList';\nimport { T, fileToObject, genPercentAdd, getFileItem, removeFileItem } from './utils';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from '../locale/default';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nclass Upload extends React.Component {\n    constructor(props) {\n        super(props);\n        this.saveUpload = (node) => {\n            this.upload = node;\n        };\n        this.onStart = (file) => {\n            const { fileList } = this.state;\n            const targetItem = fileToObject(file);\n            targetItem.status = 'uploading';\n            const nextFileList = fileList.concat();\n            const fileIndex = findIndex(nextFileList, ({ uid }) => uid === targetItem.uid);\n            if (fileIndex === -1) {\n                nextFileList.push(targetItem);\n            }\n            else {\n                nextFileList[fileIndex] = targetItem;\n            }\n            this.onChange({\n                file: targetItem,\n                fileList: nextFileList,\n            });\n            // fix ie progress\n            if (!window.File || process.env.TEST_IE) {\n                this.autoUpdateProgress(0, targetItem);\n            }\n        };\n        this.onSuccess = (response, file, xhr) => {\n            this.clearProgressTimer();\n            try {\n                if (typeof response === 'string') {\n                    response = JSON.parse(response);\n                }\n            }\n            catch (e) {\n                /* do nothing */\n            }\n            const { fileList } = this.state;\n            const targetItem = getFileItem(file, fileList);\n            // removed\n            if (!targetItem) {\n                return;\n            }\n            targetItem.status = 'done';\n            targetItem.response = response;\n            targetItem.xhr = xhr;\n            this.onChange({\n                file: Object.assign({}, targetItem),\n                fileList,\n            });\n        };\n        this.onProgress = (e, file) => {\n            const { fileList } = this.state;\n            const targetItem = getFileItem(file, fileList);\n            // removed\n            if (!targetItem) {\n                return;\n            }\n            targetItem.percent = e.percent;\n            this.onChange({\n                event: e,\n                file: Object.assign({}, targetItem),\n                fileList,\n            });\n        };\n        this.onError = (error, response, file) => {\n            this.clearProgressTimer();\n            const { fileList } = this.state;\n            const targetItem = getFileItem(file, fileList);\n            // removed\n            if (!targetItem) {\n                return;\n            }\n            targetItem.error = error;\n            targetItem.response = response;\n            targetItem.status = 'error';\n            this.onChange({\n                file: Object.assign({}, targetItem),\n                fileList,\n            });\n        };\n        this.handleRemove = (file) => {\n            const { onRemove } = this.props;\n            const { fileList } = this.state;\n            Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(ret => {\n                // Prevent removing file\n                if (ret === false) {\n                    return;\n                }\n                const removedFileList = removeFileItem(file, fileList);\n                if (removedFileList) {\n                    file.status = 'removed'; // eslint-disable-line\n                    if (this.upload) {\n                        this.upload.abort(file);\n                    }\n                    this.onChange({\n                        file,\n                        fileList: removedFileList,\n                    });\n                }\n            });\n        };\n        this.onChange = (info) => {\n            if (!('fileList' in this.props)) {\n                this.setState({ fileList: info.fileList });\n            }\n            const { onChange } = this.props;\n            if (onChange) {\n                onChange(info);\n            }\n        };\n        this.onFileDrop = (e) => {\n            this.setState({\n                dragState: e.type,\n            });\n        };\n        this.beforeUpload = (file, fileList) => {\n            const { beforeUpload } = this.props;\n            const { fileList: stateFileList } = this.state;\n            if (!beforeUpload) {\n                return true;\n            }\n            const result = beforeUpload(file, fileList);\n            if (result === false) {\n                this.onChange({\n                    file,\n                    fileList: uniqBy(stateFileList.concat(fileList.map(fileToObject)), (item) => item.uid),\n                });\n                return false;\n            }\n            if (result && result.then) {\n                return result;\n            }\n            return true;\n        };\n        this.renderUploadList = (locale) => {\n            const { showUploadList, listType, onPreview, onDownload, previewFile, disabled, locale: propLocale, } = this.props;\n            const { showRemoveIcon, showPreviewIcon, showDownloadIcon } = showUploadList;\n            const { fileList } = this.state;\n            return (<UploadList listType={listType} items={fileList} previewFile={previewFile} onPreview={onPreview} onDownload={onDownload} onRemove={this.handleRemove} showRemoveIcon={!disabled && showRemoveIcon} showPreviewIcon={showPreviewIcon} showDownloadIcon={showDownloadIcon} locale={Object.assign(Object.assign({}, locale), propLocale)}/>);\n        };\n        this.renderUpload = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, className, showUploadList, listType, type, disabled, children, style, } = this.props;\n            const { fileList, dragState } = this.state;\n            const prefixCls = getPrefixCls('upload', customizePrefixCls);\n            const rcUploadProps = Object.assign(Object.assign({ onStart: this.onStart, onError: this.onError, onProgress: this.onProgress, onSuccess: this.onSuccess }, this.props), { prefixCls, beforeUpload: this.beforeUpload });\n            delete rcUploadProps.className;\n            delete rcUploadProps.style;\n            const uploadList = showUploadList ? (<LocaleReceiver componentName=\"Upload\" defaultLocale={defaultLocale.Upload}>\n        {this.renderUploadList}\n      </LocaleReceiver>) : null;\n            if (type === 'drag') {\n                const dragCls = classNames(prefixCls, {\n                    [`${prefixCls}-drag`]: true,\n                    [`${prefixCls}-drag-uploading`]: fileList.some(file => file.status === 'uploading'),\n                    [`${prefixCls}-drag-hover`]: dragState === 'dragover',\n                    [`${prefixCls}-disabled`]: disabled,\n                }, className);\n                return (<span>\n          <div className={dragCls} onDrop={this.onFileDrop} onDragOver={this.onFileDrop} onDragLeave={this.onFileDrop} style={style}>\n            <RcUpload {...rcUploadProps} ref={this.saveUpload} className={`${prefixCls}-btn`}>\n              <div className={`${prefixCls}-drag-container`}>{children}</div>\n            </RcUpload>\n          </div>\n          {uploadList}\n        </span>);\n            }\n            const uploadButtonCls = classNames(prefixCls, {\n                [`${prefixCls}-select`]: true,\n                [`${prefixCls}-select-${listType}`]: true,\n                [`${prefixCls}-disabled`]: disabled,\n            });\n            // Remove id to avoid open by label when trigger is hidden\n            // https://github.com/ant-design/ant-design/issues/14298\n            // https://github.com/ant-design/ant-design/issues/16478\n            if (!children || disabled) {\n                delete rcUploadProps.id;\n            }\n            const uploadButton = (<div className={uploadButtonCls} style={children ? undefined : { display: 'none' }}>\n        <RcUpload {...rcUploadProps} ref={this.saveUpload}/>\n      </div>);\n            if (listType === 'picture-card') {\n                return (<span className={classNames(className, `${prefixCls}-picture-card-wrapper`)}>\n          {uploadList}\n          {uploadButton}\n        </span>);\n            }\n            return (<span className={className}>\n        {uploadButton}\n        {uploadList}\n      </span>);\n        };\n        this.state = {\n            fileList: props.fileList || props.defaultFileList || [],\n            dragState: 'drop',\n        };\n        warning('fileList' in props || !('value' in props), 'Upload', '`value` is not validate prop, do you mean `fileList`?');\n    }\n    static getDerivedStateFromProps(nextProps) {\n        if ('fileList' in nextProps) {\n            return {\n                fileList: nextProps.fileList || [],\n            };\n        }\n        return null;\n    }\n    componentWillUnmount() {\n        this.clearProgressTimer();\n    }\n    clearProgressTimer() {\n        clearInterval(this.progressTimer);\n    }\n    autoUpdateProgress(_, file) {\n        const getPercent = genPercentAdd();\n        let curPercent = 0;\n        this.clearProgressTimer();\n        this.progressTimer = setInterval(() => {\n            curPercent = getPercent(curPercent);\n            this.onProgress({\n                percent: curPercent * 100,\n            }, file);\n        }, 200);\n    }\n    render() {\n        return <ConfigConsumer>{this.renderUpload}</ConfigConsumer>;\n    }\n}\nUpload.defaultProps = {\n    type: 'select',\n    multiple: false,\n    action: '',\n    data: {},\n    accept: '',\n    beforeUpload: T,\n    showUploadList: true,\n    listType: 'text',\n    className: '',\n    disabled: false,\n    supportServerRender: true,\n};\npolyfill(Upload);\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}